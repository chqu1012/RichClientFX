/*
 * generated by Xtext 2.14.0
 */
package de.dc.emf.javafx.xtext.jvm.lang.jvmmodel

import com.google.inject.Inject
import de.dc.emf.javafx.model.javafx.ProjectFX
import de.dc.emf.javafx.model.javafx.TableViewFX
import javafx.beans.value.ObservableValue
import javafx.collections.ObservableList
import javafx.collections.transformation.FilteredList
import javafx.scene.control.TableColumn
import javafx.scene.control.TableView
import javafx.util.Callback
import org.eclipse.xtext.common.types.JvmVisibility
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder

class JavaFXCuDslJvmModelInferrer extends AbstractModelInferrer {

	@Inject extension JvmTypesBuilder

	def dispatch void infer(ProjectFX element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		val packagePath = element.packagePath+'.'
		
		element.controls.filter[ it instanceof TableViewFX].forEach[content|
			acceptor.accept(element.toClass(packagePath+'Base'+content.name)) [
				val table = content as TableViewFX
				superTypes+=TableView.typeRef()
				
				members += element.toField('masterData', ObservableList.typeRef)
				members += element.toField('filteredMasterData', FilteredList.typeRef)
				
				table.columns.forEach[col|
					members += element.toField(col.name.toFirstLower+'Column', TableColumn.typeRef)
				]
				
//				val modelName = '''«IF table.usedModel===null»«ELSE»«table.usedModel.name.toFirstUpper»«ENDIF»'''
//				
//				element.toConstructor[
//					body = '''
//					«FOR col : table.columns»
//					«col.name.toFirstLower»Column = createColumn("«col.name.toFirstUpper»", «col.width»,  new Base«modelName»CellFeatures(«modelName»Type.«col.name.toFirstUpper»));
//					«ENDFOR»
//					'''
//				]
//				
//				members += element.toMethod('createColumn', TableColumn.typeRef)[
//					visibility=JvmVisibility.PROTECTED
//					parameters+=element.toParameter('name', String.typeRef)
//					parameters+=element.toParameter('width', Double.typeRef)
//					parameters+=element.toParameter('width', Callback.typeRef)
//					parameters+=element.toParameter('cellFeatures', ObservableValue.typeRef)
//					body = '''
//					TableColumn column = new TableColumn(name);
//					column.setPrefWidth(width);
//					column.setCellValueFactory(cellFeatures);
//					getColumns().add(column);
//					return column;					
//					'''
//				]
			]
		]
	}
}
