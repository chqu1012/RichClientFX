/**
 * generated by Xtext 2.17.0
 */
package de.dc.javafx.xcore.lang.jvmmodel;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import de.dc.emf.javafx.model.javafx.AreaChartFX;
import de.dc.emf.javafx.model.javafx.AttributeFX;
import de.dc.emf.javafx.model.javafx.BaseTileFX;
import de.dc.emf.javafx.model.javafx.Bean;
import de.dc.emf.javafx.model.javafx.BubbleChartFX;
import de.dc.emf.javafx.model.javafx.ControlFX;
import de.dc.emf.javafx.model.javafx.LineChartFX;
import de.dc.emf.javafx.model.javafx.ListViewFX;
import de.dc.emf.javafx.model.javafx.PieChartFX;
import de.dc.emf.javafx.model.javafx.ProjectFX;
import de.dc.emf.javafx.model.javafx.ScatterChartFX;
import de.dc.emf.javafx.model.javafx.TableColumnFX;
import de.dc.emf.javafx.model.javafx.TableViewFX;
import de.dc.emf.javafx.model.javafx.TileBarFX;
import de.dc.emf.javafx.model.javafx.TreeViewFX;
import de.dc.emf.javafx.model.javafx.XYChartFX;
import de.dc.javafx.xcore.lang.lib.BaseKeyValueTile;
import de.dc.javafx.xcore.lang.lib.BaseListView;
import de.dc.javafx.xcore.lang.lib.BaseTableView;
import de.dc.javafx.xcore.lang.lib.BaseTileBar;
import de.dc.javafx.xcore.lang.lib.BaseTreeView;
import de.dc.javafx.xcore.lang.lib.chart.BaseAreaChart;
import de.dc.javafx.xcore.lang.lib.chart.BaseBubbleChart;
import de.dc.javafx.xcore.lang.lib.chart.BaseLineChart;
import de.dc.javafx.xcore.lang.lib.chart.BaseScatterChart;
import de.dc.javafx.xcore.lang.lib.feature.ListCellFeature;
import de.dc.javafx.xcore.lang.lib.feature.TreeCellFeature;
import de.dc.javafx.xcore.lang.lib.model.PropertyValue;
import java.util.Arrays;
import java.util.Collections;
import java.util.function.Consumer;
import java.util.function.Predicate;
import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.chart.NumberAxis;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TreeItem;
import javafx.stage.Stage;
import javafx.util.Callback;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtend2.lib.StringConcatenationClient;
import org.eclipse.xtext.common.types.JvmAnnotationReference;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmEnumerationLiteral;
import org.eclipse.xtext.common.types.JvmEnumerationType;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.common.types.util.TypeReferences;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.Functions.Function2;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class JavaFXDslJvmModelInferrer extends AbstractModelInferrer {
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private TypeReferences typeReferences;
  
  protected void _infer(final ProjectFX element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    super.infer(element, acceptor, isPreIndexingPhase);
  }
  
  protected void _infer(final TableViewFX element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    EObject _rootContainer = EcoreUtil.getRootContainer(element);
    String _packagePath = ((ProjectFX) _rootContainer).getPackagePath();
    final String packagePath = (_packagePath + ".");
    final JvmTypeReference model = element.getUsedModel();
    String _name = element.getName();
    String _plus = ((packagePath + "model.") + _name);
    final String type = (_plus + "Type");
    String _name_1 = element.getName();
    String _plus_1 = ((packagePath + "feature.Base") + _name_1);
    final String feature = (_plus_1 + "CellFeatures");
    final Procedure1<JvmEnumerationType> _function = (JvmEnumerationType it) -> {
      EList<TableColumnFX> _columns = element.getColumns();
      for (final TableColumnFX literal : _columns) {
        EList<JvmMember> _members = it.getMembers();
        JvmEnumerationLiteral _enumerationLiteral = this._jvmTypesBuilder.toEnumerationLiteral(element, literal.getName());
        this._jvmTypesBuilder.<JvmEnumerationLiteral>operator_add(_members, _enumerationLiteral);
      }
    };
    acceptor.<JvmEnumerationType>accept(this._jvmTypesBuilder.toEnumerationType(element, type, _function));
    final Procedure1<JvmGenericType> _function_1 = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Callback.class, this._typeReferenceBuilder.typeRef(TableColumn.CellDataFeatures.class, model, model), this._typeReferenceBuilder.typeRef(ObservableValue.class, model));
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, Collections.<JvmTypeReference>unmodifiableList(CollectionLiterals.<JvmTypeReference>newArrayList(_typeRef)));
      EList<JvmMember> _members = it.getMembers();
      JvmField _field = this._jvmTypesBuilder.toField(element, "type", this._typeReferenceBuilder.typeRef(type));
      this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmConstructor> _function_2 = (JvmConstructor it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "type", this._typeReferenceBuilder.typeRef(type));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("this.type = type;");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(element, _function_2);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_1, _constructor);
      EList<JvmMember> _members_2 = it.getMembers();
      final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
        it_1.setVisibility(JvmVisibility.PUBLIC);
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "feature", this._typeReferenceBuilder.typeRef(TableColumn.CellDataFeatures.class, model, model));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return new ");
            _builder.append(SimpleStringProperty.class);
            _builder.append("(getText(feature.getValue()));");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(element, "call", this._typeReferenceBuilder.typeRef(ObservableValue.class), _function_3);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method);
      EList<JvmMember> _members_3 = it.getMembers();
      final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
        it_1.setVisibility(JvmVisibility.PROTECTED);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "item", model);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("switch (type) {");
            _builder.newLine();
            {
              EList<TableColumnFX> _columns = element.getColumns();
              for(final TableColumnFX c : _columns) {
                _builder.append("\t");
                _builder.append("case ");
                String _name = c.getName();
                _builder.append(_name, "\t");
                _builder.append(":");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("return get");
                String _name_1 = c.getName();
                _builder.append(_name_1, "\t\t");
                _builder.append("(item);");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("default:");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("return \"\";");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(element, "getText", this._typeReferenceBuilder.typeRef(String.class), _function_4);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _method_1);
      EList<TableColumnFX> _columns = element.getColumns();
      for (final TableColumnFX column : _columns) {
        EList<JvmMember> _members_4 = it.getMembers();
        String _name_2 = column.getName();
        String _plus_2 = ("get" + _name_2);
        final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
          it_1.setVisibility(JvmVisibility.PROTECTED);
          EList<JvmFormalParameter> _parameters = it_1.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "item", model);
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          StringConcatenationClient _client = new StringConcatenationClient() {
            @Override
            protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
              _builder.append("return ");
              _builder.append(String.class);
              _builder.append(".valueOf(item.get");
              String _name = column.getName();
              _builder.append(_name);
              _builder.append("());");
            }
          };
          this._jvmTypesBuilder.setBody(it_1, _client);
        };
        JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(element, _plus_2, this._typeReferenceBuilder.typeRef(String.class), _function_5);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, _method_2);
      }
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, feature, _function_1));
    String _name_2 = element.getName();
    String _plus_2 = ((packagePath + "Base") + _name_2);
    final Procedure1<JvmGenericType> _function_2 = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(BaseTableView.class, model);
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "oldV", model);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(element, "newV", model);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            {
              int _size = element.getColumns().size();
              int _minus = (_size - 1);
              IntegerRange _upTo = new IntegerRange(0, _minus);
              for(final Integer i : _upTo) {
                final TableColumnFX c = element.getColumns().get((i).intValue());
                _builder.newLineIfNotEmpty();
                _builder.append("properties.get(");
                _builder.append(i);
                _builder.append(").setValue(");
                _builder.append(String.class);
                _builder.append(".valueOf(newV.get");
                String _firstUpper = StringExtensions.toFirstUpper(c.getName());
                _builder.append(_firstUpper);
                _builder.append("()));");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(element, "onViewSelectionChanged", this._typeReferenceBuilder.typeRef("void"), _function_3);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "properties", this._typeReferenceBuilder.typeRef(ObservableList.class, this._typeReferenceBuilder.typeRef(PropertyValue.class)));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("for (");
            JvmTypeReference _typeRef = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(type);
            _builder.append(_typeRef);
            _builder.append(" type : ");
            JvmTypeReference _typeRef_1 = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(type);
            _builder.append(_typeRef_1);
            _builder.append(".values()) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("properties.add(new ");
            _builder.append(PropertyValue.class, "\t");
            _builder.append("(type.name(), \"\"));");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(element, "initProperties", this._typeReferenceBuilder.typeRef("void"), _function_4);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method_1);
      EList<JvmMember> _members_2 = it.getMembers();
      final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            {
              EList<TableColumnFX> _columns = element.getColumns();
              for(final TableColumnFX c : _columns) {
                _builder.append("createColumn(");
                JvmTypeReference _typeRef = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(type);
                _builder.append(_typeRef);
                _builder.append(".");
                String _firstUpper = StringExtensions.toFirstUpper(c.getName());
                _builder.append(_firstUpper);
                _builder.append(", Double.valueOf(");
                int _width = c.getWidth();
                _builder.append(_width);
                _builder.append("))");
                {
                  JvmTypeReference _cellValueFactory = c.getCellValueFactory();
                  boolean _tripleNotEquals = (_cellValueFactory != null);
                  if (_tripleNotEquals) {
                    _builder.append(".setCellValueFactory(new ");
                    JvmTypeReference _cellValueFactory_1 = c.getCellValueFactory();
                    _builder.append(_cellValueFactory_1);
                    _builder.append("())");
                  }
                }
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(element, "initColumns", this._typeReferenceBuilder.typeRef("void"), _function_5);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_2);
      EList<JvmMember> _members_3 = it.getMembers();
      final Procedure1<JvmOperation> _function_6 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "type", this._typeReferenceBuilder.typeRef(type));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(element, "size", this._typeReferenceBuilder.typeRef(Double.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return createColumn(type.name(), size, new ");
            JvmTypeReference _typeRef = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(feature);
            _builder.append(_typeRef);
            _builder.append("(type));");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_3 = this._jvmTypesBuilder.toMethod(element, "createColumn", this._typeReferenceBuilder.typeRef(TableColumn.class, model, model), _function_6);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _method_3);
      EList<JvmMember> _members_4 = it.getMembers();
      final Procedure1<JvmOperation> _function_7 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append(StringProperty.class);
            _builder.append(" searchTextProperty = searchTextfield.textProperty();");
            _builder.newLineIfNotEmpty();
            {
              EList<TableColumnFX> _columns = element.getColumns();
              for(final TableColumnFX c : _columns) {
                {
                  boolean _isUseFilter = c.isUseFilter();
                  if (_isUseFilter) {
                    String _lowerCase = c.getName().toLowerCase();
                    final String filter = (_lowerCase + "Filter");
                    _builder.newLineIfNotEmpty();
                    _builder.append(ObjectProperty.class);
                    _builder.append("<");
                    _builder.append(Predicate.class);
                    _builder.append("<");
                    _builder.append(model);
                    _builder.append(">> ");
                    _builder.append(filter);
                    _builder.append(" = new ");
                    _builder.append(SimpleObjectProperty.class);
                    _builder.append("<>();");
                    _builder.newLineIfNotEmpty();
                    _builder.append(filter);
                    _builder.append(".bind(");
                    _builder.append(Bindings.class);
                    _builder.append(".createObjectBinding(() -> current -> {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("String searchContent = searchTextfield.getText().toLowerCase();");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("String data = ");
                    _builder.append(String.class, "\t");
                    _builder.append(".valueOf(current.get");
                    String _firstUpper = StringExtensions.toFirstUpper(c.getName());
                    _builder.append(_firstUpper, "\t");
                    _builder.append("()).toLowerCase();");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("return data.contains(searchContent);");
                    _builder.newLine();
                    _builder.append("}, searchTextProperty));");
                    _builder.newLine();
                  }
                }
              }
            }
            final Function1<TableColumnFX, Boolean> _function = (TableColumnFX it_2) -> {
              return Boolean.valueOf(it_2.isUseFilter());
            };
            final Function1<TableColumnFX, String> _function_1 = (TableColumnFX it_2) -> {
              String _firstLower = StringExtensions.toFirstLower(it_2.getName());
              return (_firstLower + "Filter.get()");
            };
            final Function2<String, String, String> _function_2 = (String p1, String p2) -> {
              return (((p1 + ".or(") + p2) + ")");
            };
            final String filterConcat = IterableExtensions.<String>reduce(IterableExtensions.<TableColumnFX, String>map(IterableExtensions.<TableColumnFX>filter(element.getColumns(), _function), _function_1), _function_2);
            _builder.newLineIfNotEmpty();
            final Function1<TableColumnFX, Boolean> _function_3 = (TableColumnFX it_2) -> {
              return Boolean.valueOf(it_2.isUseFilter());
            };
            final Function1<TableColumnFX, String> _function_4 = (TableColumnFX it_2) -> {
              String _firstLower = StringExtensions.toFirstLower(it_2.getName());
              return (_firstLower + "Filter");
            };
            final Function2<String, String, String> _function_5 = (String p1, String p2) -> {
              return ((p1 + ", ") + p2);
            };
            final String filterSeparate = IterableExtensions.<String>reduce(IterableExtensions.<TableColumnFX, String>map(IterableExtensions.<TableColumnFX>filter(element.getColumns(), _function_3), _function_4), _function_5);
            _builder.newLineIfNotEmpty();
            _builder.append("return Bindings.createObjectBinding(()->");
            _builder.append(filterConcat);
            _builder.append(", ");
            _builder.append(filterSeparate);
            _builder.append(");\t");
            _builder.newLineIfNotEmpty();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_4 = this._jvmTypesBuilder.toMethod(element, "initSearchfilterBinding", this._typeReferenceBuilder.typeRef(ObservableValue.class), _function_7);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, _method_4);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, _plus_2), _function_2);
    final Procedure1<JvmOperation> _function_3 = (JvmOperation it) -> {
      StringConcatenationClient _client = new StringConcatenationClient() {
        @Override
        protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
          String _name = element.getName();
          JvmTypeReference _typeRef = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(((packagePath + "Base") + _name));
          _builder.append(_typeRef);
          _builder.append(" view = new ");
          String _name_1 = element.getName();
          JvmTypeReference _typeRef_1 = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(((packagePath + "Base") + _name_1));
          _builder.append(_typeRef_1);
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.append(ObservableList.class);
          _builder.append("<");
          _builder.append(model);
          _builder.append("> items = ");
          _builder.append(FXCollections.class);
          _builder.append(".observableArrayList();");
          _builder.newLineIfNotEmpty();
          _builder.append("for (int i = 0; i < 30; i++) {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append(model, "\t");
          _builder.append(" item = new ");
          _builder.append(model, "\t");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("items.add(item);");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.append("view.setInput(items);");
          _builder.newLine();
          _builder.append("return view;");
          _builder.newLine();
        }
      };
      this._jvmTypesBuilder.setBody(it, _client);
    };
    this.demo(acceptor, element, packagePath, this._jvmTypesBuilder.toMethod(element, "getRoot", this._typeReferenceBuilder.typeRef(Parent.class), _function_3));
  }
  
  public void demo(final IJvmDeclaredTypeAcceptor acceptor, final ControlFX element, final String packagePath, final JvmOperation operation) {
    boolean _isGenerateDemo = element.isGenerateDemo();
    if (_isGenerateDemo) {
      String _name = element.getName();
      String _plus = ((packagePath + "demo.") + _name);
      String _plus_1 = (_plus + "Application");
      final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
        EList<JvmTypeReference> _superTypes = it.getSuperTypes();
        JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Application.class);
        this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
        EList<JvmMember> _members = it.getMembers();
        final Procedure1<JvmOperation> _function_1 = (JvmOperation it_1) -> {
          EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
          JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
          this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
          EList<JvmFormalParameter> _parameters = it_1.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "primaryStage", this._typeReferenceBuilder.typeRef(Stage.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          StringConcatenationClient _client = new StringConcatenationClient() {
            @Override
            protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
              _builder.append("primaryStage.setScene(new ");
              _builder.append(Scene.class);
              _builder.append("(getRoot(), 600, 400));");
              _builder.newLineIfNotEmpty();
              _builder.append("primaryStage.show();");
              _builder.newLine();
            }
          };
          this._jvmTypesBuilder.setBody(it_1, _client);
        };
        JvmOperation _method = this._jvmTypesBuilder.toMethod(element, "start", this._typeReferenceBuilder.typeRef("void"), _function_1);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
        EList<JvmMember> _members_1 = it.getMembers();
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, operation);
        EList<JvmMember> _members_2 = it.getMembers();
        final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
          it_1.setStatic(true);
          EList<JvmFormalParameter> _parameters = it_1.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "args", this._jvmTypesBuilder.addArrayTypeDimension(this._typeReferenceBuilder.typeRef(String.class)));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          StringConcatenationClient _client = new StringConcatenationClient() {
            @Override
            protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
              _builder.append("launch(args);");
            }
          };
          this._jvmTypesBuilder.setBody(it_1, _client);
        };
        JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(element, "main", this._typeReferenceBuilder.typeRef("void"), _function_2);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_1);
      };
      acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, _plus_1), _function);
    }
  }
  
  protected void _infer(final Bean element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    EObject _rootContainer = EcoreUtil.getRootContainer(element);
    String _packagePath = ((ProjectFX) _rootContainer).getPackagePath();
    final String packagePath = (_packagePath + ".");
    String _name = element.getName();
    String _plus = (packagePath + _name);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      final Consumer<AttributeFX> _function_1 = (AttributeFX attribute) -> {
        EList<JvmMember> _members = it.getMembers();
        JvmField _field = this._jvmTypesBuilder.toField(element, StringExtensions.toFirstLower(attribute.getName()), this._typeReferenceBuilder.typeRef(attribute.getType()));
        this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
        if ((((Objects.equal(attribute.getType(), "Boolean") || Objects.equal(attribute.getType(), "boolean")) || Objects.equal(attribute.getType(), "Bool")) || Objects.equal(attribute.getType(), "bool"))) {
          EList<JvmMember> _members_1 = it.getMembers();
          String _firstUpper = StringExtensions.toFirstUpper(attribute.getName());
          String _plus_1 = ("get" + _firstUpper);
          final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
            it_1.setVisibility(JvmVisibility.PUBLIC);
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("return this.");
                String _firstLower = StringExtensions.toFirstLower(attribute.getName());
                _builder.append(_firstLower);
                _builder.append(";");
              }
            };
            this._jvmTypesBuilder.setBody(it_1, _client);
          };
          JvmOperation _method = this._jvmTypesBuilder.toMethod(element, _plus_1, this._typeReferenceBuilder.typeRef(attribute.getType()), _function_2);
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
        } else {
          EList<JvmMember> _members_2 = it.getMembers();
          JvmOperation _getter = this._jvmTypesBuilder.toGetter(element, StringExtensions.toFirstLower(attribute.getName()), this._typeReferenceBuilder.typeRef(attribute.getType()));
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _getter);
        }
        EList<JvmMember> _members_3 = it.getMembers();
        JvmOperation _setter = this._jvmTypesBuilder.toSetter(element, StringExtensions.toFirstLower(attribute.getName()), this._typeReferenceBuilder.typeRef(attribute.getType()));
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _setter);
      };
      element.getAttributes().forEach(_function_1);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, _plus), _function);
  }
  
  protected void _infer(final TreeViewFX element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    EObject _rootContainer = EcoreUtil.getRootContainer(element);
    String _packagePath = ((ProjectFX) _rootContainer).getPackagePath();
    final String packagePath = (_packagePath + ".");
    final JvmTypeReference model = element.getUsedModel();
    String _name = element.getName();
    String _plus = ((packagePath + "feature.") + _name);
    final String feature = (_plus + "CellFeature");
    String _name_1 = element.getName();
    String _plus_1 = ((packagePath + "model.") + _name_1);
    final String type = (_plus_1 + "Type");
    String _name_2 = element.getName();
    String _plus_2 = ((packagePath + "Base") + _name_2);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(BaseTreeView.class, model);
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
      final Procedure1<JvmEnumerationType> _function_1 = (JvmEnumerationType it_1) -> {
      };
      acceptor.<JvmEnumerationType>accept(this._jvmTypesBuilder.toEnumerationType(element, type, _function_1));
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return new ");
            JvmTypeReference _typeRef = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(feature);
            _builder.append(_typeRef);
            _builder.append("();");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(element, "getCellFeature", this._typeReferenceBuilder.typeRef(TreeCellFeature.class, model), _function_2);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "properties", this._typeReferenceBuilder.typeRef(ObservableList.class, this._typeReferenceBuilder.typeRef(PropertyValue.class)));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("// TODO: To customize the propertyview details, enhanced the ");
            JvmTypeReference _typeRef = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(type);
            _builder.append(_typeRef);
            _builder.newLineIfNotEmpty();
            _builder.append("for (");
            JvmTypeReference _typeRef_1 = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(type);
            _builder.append(_typeRef_1);
            _builder.append(" type : ");
            JvmTypeReference _typeRef_2 = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(type);
            _builder.append(_typeRef_2);
            _builder.append(".values()) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("properties.add(new ");
            _builder.append(PropertyValue.class, "\t");
            _builder.append("(type.name(), \"\"));");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(element, "initProperties", this._typeReferenceBuilder.typeRef("void"), _function_3);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method_1);
      EList<JvmMember> _members_2 = it.getMembers();
      final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
        it_1.setVisibility(JvmVisibility.PROTECTED);
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "oldV", this._typeReferenceBuilder.typeRef(TreeItem.class, model));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(element, "newV", this._typeReferenceBuilder.typeRef(TreeItem.class, model));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("// TODO: Implement the fields to show in propertyview");
            _builder.newLine();
            _builder.append("// properties.get(0).setValue(\"Hello World\");");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(element, "onTreeViewSelectionChanged", this._typeReferenceBuilder.typeRef("void"), _function_4);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_2);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, _plus_2), _function);
    final Procedure1<JvmGenericType> _function_1 = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(TreeCellFeature.class, model);
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "item", model);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return item.getName()==null?\"\":item.getName();");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(element, "getValue", this._typeReferenceBuilder.typeRef(String.class), _function_2);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, feature), _function_1);
    final Procedure1<JvmOperation> _function_2 = (JvmOperation it) -> {
      StringConcatenationClient _client = new StringConcatenationClient() {
        @Override
        protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
          String _name = element.getName();
          JvmTypeReference _typeRef = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(((packagePath + "Base") + _name));
          _builder.append(_typeRef);
          _builder.append(" view = new ");
          String _name_1 = element.getName();
          JvmTypeReference _typeRef_1 = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(((packagePath + "Base") + _name_1));
          _builder.append(_typeRef_1);
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.append("for (int i = 0; i < 20; i++) {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("String key = \"Eins\"+i;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("view.addItemTo(");
          String _name_2 = element.getName();
          JvmTypeReference _typeRef_2 = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(((packagePath + "Base") + _name_2));
          _builder.append(_typeRef_2, "\t");
          _builder.append(".ROOT_KEY, new ");
          _builder.append(model, "\t");
          _builder.append("(key, 1, true));");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("for (int j = 0; j < 30; j++) {");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("view.addItemTo(key, new ");
          _builder.append(model, "\t\t");
          _builder.append("(\"Zwei\"+j, i+j, true));");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.append("return view;");
          _builder.newLine();
        }
      };
      this._jvmTypesBuilder.setBody(it, _client);
    };
    this.demo(acceptor, element, packagePath, this._jvmTypesBuilder.toMethod(element, "getRoot", this._typeReferenceBuilder.typeRef(Parent.class), _function_2));
  }
  
  protected void _infer(final ListViewFX element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    EObject _rootContainer = EcoreUtil.getRootContainer(element);
    String _packagePath = ((ProjectFX) _rootContainer).getPackagePath();
    final String packagePath = (_packagePath + ".");
    final JvmTypeReference model = element.getUsedModel();
    String _name = element.getName();
    String _plus = ((packagePath + "feature.") + _name);
    final String feature = (_plus + "CellFeature");
    String _name_1 = element.getName();
    String _plus_1 = ((packagePath + "model.") + _name_1);
    final String type = (_plus_1 + "Type");
    String _name_2 = element.getName();
    String _plus_2 = ((packagePath + "Base") + _name_2);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(BaseListView.class, model);
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
      final Procedure1<JvmEnumerationType> _function_1 = (JvmEnumerationType it_1) -> {
      };
      acceptor.<JvmEnumerationType>accept(this._jvmTypesBuilder.toEnumerationType(element, type, _function_1));
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return new ");
            {
              JvmTypeReference _cellFactory = element.getCellFactory();
              boolean _tripleNotEquals = (_cellFactory != null);
              if (_tripleNotEquals) {
                JvmTypeReference _cellFactory_1 = element.getCellFactory();
                _builder.append(_cellFactory_1);
              } else {
                JvmTypeReference _typeRef = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(feature);
                _builder.append(_typeRef);
              }
            }
            _builder.append("();");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(element, "getCellFeature", this._typeReferenceBuilder.typeRef(ListCellFeature.class, model), _function_2);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "properties", this._typeReferenceBuilder.typeRef(ObservableList.class, this._typeReferenceBuilder.typeRef(PropertyValue.class)));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("// TODO: To customize the propertyview details, enhanced the ");
            JvmTypeReference _typeRef = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(type);
            _builder.append(_typeRef);
            _builder.newLineIfNotEmpty();
            _builder.append("for (");
            JvmTypeReference _typeRef_1 = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(type);
            _builder.append(_typeRef_1);
            _builder.append(" type : ");
            JvmTypeReference _typeRef_2 = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(type);
            _builder.append(_typeRef_2);
            _builder.append(".values()) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("properties.add(new ");
            _builder.append(PropertyValue.class, "\t");
            _builder.append("(type.name(), \"\"));");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(element, "initProperties", this._typeReferenceBuilder.typeRef("void"), _function_3);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method_1);
      EList<JvmMember> _members_2 = it.getMembers();
      final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
        it_1.setVisibility(JvmVisibility.PROTECTED);
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "oldV", model);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(element, "newV", model);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("// TODO: Implement the fields to show in propertyview");
            _builder.newLine();
            _builder.append("// properties.get(0).setValue(\"Hello World\");");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(element, "onViewSelectionChanged", this._typeReferenceBuilder.typeRef("void"), _function_4);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_2);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, _plus_2), _function);
    final Procedure1<JvmGenericType> _function_1 = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(ListCellFeature.class, model);
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "item", model);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return item.toString();");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(element, "getValue", this._typeReferenceBuilder.typeRef(String.class), _function_2);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, feature), _function_1);
    final Procedure1<JvmOperation> _function_2 = (JvmOperation it) -> {
      StringConcatenationClient _client = new StringConcatenationClient() {
        @Override
        protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
          String _name = element.getName();
          JvmTypeReference _typeRef = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(((packagePath + "Base") + _name));
          _builder.append(_typeRef);
          _builder.append(" view = new ");
          String _name_1 = element.getName();
          JvmTypeReference _typeRef_1 = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(((packagePath + "Base") + _name_1));
          _builder.append(_typeRef_1);
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.append(ObservableList.class);
          _builder.append("<");
          _builder.append(model);
          _builder.append("> items = ");
          _builder.append(FXCollections.class);
          _builder.append(".observableArrayList();");
          _builder.newLineIfNotEmpty();
          _builder.append("for (int i = 0; i < 50; i++) {");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("items.add(new ");
          _builder.append(model, "\t");
          _builder.append("());");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.append("view.setInput(items);");
          _builder.newLine();
          _builder.append("return view;");
          _builder.newLine();
        }
      };
      this._jvmTypesBuilder.setBody(it, _client);
    };
    this.demo(acceptor, element, packagePath, this._jvmTypesBuilder.toMethod(element, "getRoot", this._typeReferenceBuilder.typeRef(Parent.class), _function_2));
  }
  
  protected void _infer(final TileBarFX element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    EObject _rootContainer = EcoreUtil.getRootContainer(element);
    String _packagePath = ((ProjectFX) _rootContainer).getPackagePath();
    final String packagePath = (_packagePath + ".");
    String _name = element.getName();
    String _plus = (packagePath + _name);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(BaseTileBar.class);
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmConstructor> _function_1 = (JvmConstructor it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("setPadding(new ");
            _builder.append(Insets.class);
            _builder.append("(10d));");
            _builder.newLineIfNotEmpty();
            _builder.append("setHgap(10d);");
            _builder.newLine();
            _builder.append("setVgap(10d);");
            _builder.newLine();
            {
              EList<BaseTileFX> _tiles = element.getTiles();
              for(final BaseTileFX tile : _tiles) {
                _builder.append(BaseKeyValueTile.class);
                _builder.append(" ");
                String _firstLower = StringExtensions.toFirstLower(tile.getName());
                _builder.append(_firstLower);
                _builder.append("Tile = new ");
                _builder.append(BaseKeyValueTile.class);
                _builder.append("(\"");
                String _firstUpper = StringExtensions.toFirstUpper(tile.getName());
                _builder.append(_firstUpper);
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                String _firstLower_1 = StringExtensions.toFirstLower(tile.getName());
                _builder.append(_firstLower_1);
                _builder.append("Tile.setValue(\"200\");");
                _builder.newLineIfNotEmpty();
                _builder.append("add(");
                String _firstLower_2 = StringExtensions.toFirstLower(tile.getName());
                _builder.append(_firstLower_2);
                _builder.append("Tile);");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(element, _function_1);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members, _constructor);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "key", this._typeReferenceBuilder.typeRef(String.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return (");
            _builder.append(BaseKeyValueTile.class);
            _builder.append(") tiles.get(key);");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(element, "findByKey", this._typeReferenceBuilder.typeRef(BaseKeyValueTile.class), _function_2);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, _plus), _function);
  }
  
  protected void _infer(final LineChartFX element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    this.createBaseChart(this._typeReferenceBuilder.typeRef(BaseLineChart.class, this._typeReferenceBuilder.typeRef(Number.class), this._typeReferenceBuilder.typeRef(Number.class)), acceptor, element);
  }
  
  protected void _infer(final AreaChartFX element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    this.createBaseChart(this._typeReferenceBuilder.typeRef(BaseAreaChart.class, this._typeReferenceBuilder.typeRef(Number.class), this._typeReferenceBuilder.typeRef(Number.class)), acceptor, element);
  }
  
  protected void _infer(final PieChartFX element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
  }
  
  protected void _infer(final ScatterChartFX element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    this.createBaseChart(this._typeReferenceBuilder.typeRef(BaseScatterChart.class, this._typeReferenceBuilder.typeRef(Number.class), this._typeReferenceBuilder.typeRef(Number.class)), acceptor, element);
  }
  
  protected void _infer(final BubbleChartFX element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    this.createBaseChart(this._typeReferenceBuilder.typeRef(BaseBubbleChart.class, this._typeReferenceBuilder.typeRef(Number.class), this._typeReferenceBuilder.typeRef(Number.class)), acceptor, element);
  }
  
  public void createBaseChart(final JvmTypeReference superType, final IJvmDeclaredTypeAcceptor acceptor, final XYChartFX element) {
    EObject _rootContainer = EcoreUtil.getRootContainer(element);
    String _packagePath = ((ProjectFX) _rootContainer).getPackagePath();
    final String packagePath = (_packagePath + ".");
    String _name = element.getName();
    String _plus = (packagePath + _name);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, superType);
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmConstructor> _function_1 = (JvmConstructor it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("super(new ");
            _builder.append(NumberAxis.class);
            _builder.append("(), new ");
            _builder.append(NumberAxis.class);
            _builder.append("());");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(element, _function_1);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members, _constructor);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return \"");
            String _title = element.getTitle();
            _builder.append(_title);
            _builder.append("\";");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(element, "getChartTitle", this._typeReferenceBuilder.typeRef(String.class), _function_2);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
      EList<JvmMember> _members_2 = it.getMembers();
      final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return \"");
            String _yAxisLabel = element.getYAxisLabel();
            _builder.append(_yAxisLabel);
            _builder.append("\";");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(element, "getYAxisTitle", this._typeReferenceBuilder.typeRef(String.class), _function_3);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_1);
      EList<JvmMember> _members_3 = it.getMembers();
      final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotationRef = this._annotationTypesBuilder.annotationRef(Override.class);
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotationRef);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return \"");
            String _xAxisLabel = element.getXAxisLabel();
            _builder.append(_xAxisLabel);
            _builder.append("\";");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(element, "getXAxisTitle", this._typeReferenceBuilder.typeRef(String.class), _function_4);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _method_2);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, _plus), _function);
  }
  
  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (element instanceof AreaChartFX) {
      _infer((AreaChartFX)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element instanceof BubbleChartFX) {
      _infer((BubbleChartFX)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element instanceof LineChartFX) {
      _infer((LineChartFX)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element instanceof ListViewFX) {
      _infer((ListViewFX)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element instanceof ScatterChartFX) {
      _infer((ScatterChartFX)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element instanceof TableViewFX) {
      _infer((TableViewFX)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element instanceof TreeViewFX) {
      _infer((TreeViewFX)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element instanceof Bean) {
      _infer((Bean)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element instanceof PieChartFX) {
      _infer((PieChartFX)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element instanceof TileBarFX) {
      _infer((TileBarFX)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element instanceof ProjectFX) {
      _infer((ProjectFX)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element != null) {
      _infer(element, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
    }
  }
}
