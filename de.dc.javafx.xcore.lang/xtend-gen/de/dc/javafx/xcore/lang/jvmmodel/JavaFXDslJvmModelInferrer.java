/**
 * generated by Xtext 2.17.0
 */
package de.dc.javafx.xcore.lang.jvmmodel;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import de.dc.emf.javafx.model.javafx.AttributeFX;
import de.dc.emf.javafx.model.javafx.Bean;
import de.dc.emf.javafx.model.javafx.ProjectFX;
import de.dc.emf.javafx.model.javafx.TableColumnFX;
import de.dc.emf.javafx.model.javafx.TableViewFX;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Predicate;
import javafx.beans.binding.Bindings;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.util.Callback;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtend2.lib.StringConcatenationClient;
import org.eclipse.xtext.common.types.JvmAnnotationReference;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmEnumerationLiteral;
import org.eclipse.xtext.common.types.JvmEnumerationType;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.common.types.TypesFactory;
import org.eclipse.xtext.common.types.util.TypeReferences;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.Functions.Function2;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class JavaFXDslJvmModelInferrer extends AbstractModelInferrer {
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private TypeReferences typeReferences;
  
  protected void _infer(final ProjectFX element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    super.infer(element, acceptor, isPreIndexingPhase);
  }
  
  protected void _infer(final TableViewFX element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    EObject _rootContainer = EcoreUtil.getRootContainer(element);
    String _packagePath = ((ProjectFX) _rootContainer).getPackagePath();
    final String packagePath = (_packagePath + ".");
    String _name = element.getName();
    String _plus = ((packagePath + "Base") + _name);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(BorderPane.class);
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
      final JvmTypeReference model = element.getUsedModel();
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmField> _function_1 = (JvmField it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append(FXCollections.class);
            _builder.append(".observableArrayList()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field = this._jvmTypesBuilder.toField(element, "masterData", this._typeReferenceBuilder.typeRef(ObservableList.class, model), _function_1);
      this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmField> _function_2 = (JvmField it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new ");
            _builder.append(FilteredList.class);
            _builder.append("<>(masterData, p->true)");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field_1 = this._jvmTypesBuilder.toField(element, "filteredMasterData", this._typeReferenceBuilder.typeRef(FilteredList.class, model), _function_2);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_1, _field_1);
      EList<JvmMember> _members_2 = it.getMembers();
      String _simpleName = element.getUsedModel().getSimpleName();
      String _plus_1 = ((packagePath + "model.") + _simpleName);
      String _plus_2 = (_plus_1 + "Type");
      final Procedure1<JvmField> _function_3 = (JvmField it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new ");
            _builder.append(HashMap.class);
            _builder.append("<>()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field_2 = this._jvmTypesBuilder.toField(element, "columns", this._typeReferenceBuilder.typeRef(Map.class, this._typeReferenceBuilder.typeRef(_plus_2), this._typeReferenceBuilder.typeRef(TableColumn.class, model, model)), _function_3);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_2, _field_2);
      EList<JvmMember> _members_3 = it.getMembers();
      final Procedure1<JvmField> _function_4 = (JvmField it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append(" ");
            _builder.append("new ");
            _builder.append(TableView.class, " ");
            _builder.append("<");
            _builder.append(model, " ");
            _builder.append(">()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field_3 = this._jvmTypesBuilder.toField(element, "tableView", this._typeReferenceBuilder.typeRef(TableView.class, model), _function_4);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_3, _field_3);
      EList<JvmMember> _members_4 = it.getMembers();
      final Procedure1<JvmField> _function_5 = (JvmField it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new TextField()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field_4 = this._jvmTypesBuilder.toField(element, "searchTextfield", this._typeReferenceBuilder.typeRef(TextField.class), _function_5);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_4, _field_4);
      EList<JvmMember> _members_5 = it.getMembers();
      final Procedure1<JvmField> _function_6 = (JvmField it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new HBox()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field_5 = this._jvmTypesBuilder.toField(element, "topPane", this._typeReferenceBuilder.typeRef(HBox.class), _function_6);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_5, _field_5);
      EList<JvmMember> _members_6 = it.getMembers();
      final Procedure1<JvmField> _function_7 = (JvmField it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new AnchorPane()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field_6 = this._jvmTypesBuilder.toField(element, "rightPane", this._typeReferenceBuilder.typeRef(AnchorPane.class), _function_7);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_6, _field_6);
      EList<JvmMember> _members_7 = it.getMembers();
      final Procedure1<JvmField> _function_8 = (JvmField it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new ");
            _builder.append(SimpleStringProperty.class);
            _builder.append("(\"\")");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field_7 = this._jvmTypesBuilder.toField(element, "searchProperty", this._typeReferenceBuilder.typeRef(StringProperty.class), _function_8);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_7, _field_7);
      EList<JvmMember> _members_8 = it.getMembers();
      final Procedure1<JvmField> _function_9 = (JvmField it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new TableView<>()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field_8 = this._jvmTypesBuilder.toField(element, "propertyView", this._typeReferenceBuilder.typeRef(TableView.class), _function_9);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_8, _field_8);
      EList<JvmMember> _members_9 = it.getMembers();
      final Procedure1<JvmField> _function_10 = (JvmField it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append(FXCollections.class);
            _builder.append(".observableArrayList()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field_9 = this._jvmTypesBuilder.toField(element, "properties", this._typeReferenceBuilder.typeRef(ObservableList.class, this._typeReferenceBuilder.typeRef((packagePath + "model.PropertyValue"))), _function_10);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_9, _field_9);
      final Consumer<TableColumnFX> _function_11 = (TableColumnFX col) -> {
        EList<JvmMember> _members_10 = it.getMembers();
        String _firstLower = StringExtensions.toFirstLower(col.getName());
        String _plus_3 = (_firstLower + "Column");
        JvmField _field_10 = this._jvmTypesBuilder.toField(element, _plus_3, this._typeReferenceBuilder.typeRef(TableColumn.class, model, model));
        this._jvmTypesBuilder.<JvmField>operator_add(_members_10, _field_10);
        boolean _isUseFilter = col.isUseFilter();
        if (_isUseFilter) {
          EList<JvmMember> _members_11 = it.getMembers();
          String _firstLower_1 = StringExtensions.toFirstLower(col.getName());
          String _plus_4 = (_firstLower_1 + "Filter");
          final Procedure1<JvmField> _function_12 = (JvmField it_1) -> {
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("new ");
                _builder.append(SimpleObjectProperty.class);
                _builder.append("<>()");
              }
            };
            this._jvmTypesBuilder.setInitializer(it_1, _client);
          };
          JvmField _field_11 = this._jvmTypesBuilder.toField(element, _plus_4, this._typeReferenceBuilder.typeRef(ObjectProperty.class, this._typeReferenceBuilder.typeRef(Predicate.class, model)), _function_12);
          this._jvmTypesBuilder.<JvmField>operator_add(_members_11, _field_11);
        }
      };
      element.getColumns().forEach(_function_11);
      StringConcatenation _builder = new StringConcatenation();
      {
        JvmTypeReference _usedModel = element.getUsedModel();
        boolean _tripleEquals = (_usedModel == null);
        if (_tripleEquals) {
        } else {
          String _firstUpper = StringExtensions.toFirstUpper(element.getUsedModel().getSimpleName());
          _builder.append(_firstUpper);
        }
      }
      final String modelName = _builder.toString();
      final JvmTypeReference modelType = this._typeReferenceBuilder.typeRef((((packagePath + "model.") + modelName) + "Type"));
      final JvmTypeReference feature = this._typeReferenceBuilder.typeRef((((packagePath + "feature.Base") + modelName) + "CellFeatures"));
      EList<JvmMember> _members_10 = it.getMembers();
      final Procedure1<JvmConstructor> _function_12 = (JvmConstructor it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("initTableView();");
            _builder.newLine();
            _builder.append("initTopPane();");
            _builder.newLine();
            _builder.append("initRightPane();");
            _builder.newLine();
            _builder.newLine();
            _builder.append("setTop(topPane);");
            _builder.newLine();
            _builder.append("setCenter(tableView);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(element, _function_12);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_10, _constructor);
      EList<JvmMember> _members_11 = it.getMembers();
      final Procedure1<JvmOperation> _function_13 = (JvmOperation it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            {
              EList<TableColumnFX> _columns = element.getColumns();
              for(final TableColumnFX col : _columns) {
                String _firstLower = StringExtensions.toFirstLower(col.getName());
                _builder.append(_firstLower);
                _builder.append("Column = createColumn(");
                _builder.append(modelType);
                _builder.append(".");
                String _firstUpper = StringExtensions.toFirstUpper(col.getName());
                _builder.append(_firstUpper);
                _builder.append(".name(), Double.valueOf(");
                int _width = col.getWidth();
                _builder.append(_width);
                _builder.append("),  new ");
                _builder.append(feature);
                _builder.append("(");
                _builder.append(modelType);
                _builder.append(".");
                String _firstUpper_1 = StringExtensions.toFirstUpper(col.getName());
                _builder.append(_firstUpper_1);
                _builder.append("));");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              EList<TableColumnFX> _columns_1 = element.getColumns();
              for(final TableColumnFX col_1 : _columns_1) {
                {
                  boolean _isUseFilter = col_1.isUseFilter();
                  if (_isUseFilter) {
                    String _firstLower_1 = StringExtensions.toFirstLower(col_1.getName());
                    String _plus = (_firstLower_1 + "Filter");
                    _builder.append(_plus);
                    _builder.append(".bind(");
                    _builder.append(Bindings.class);
                    _builder.append(".createObjectBinding(() -> ");
                    _builder.newLineIfNotEmpty();
                    _builder.append("            ");
                    _builder.append("current -> String.valueOf(current.get");
                    String _firstUpper_2 = StringExtensions.toFirstUpper(col_1.getName());
                    _builder.append(_firstUpper_2, "            ");
                    _builder.append("()).toLowerCase().contains(searchTextfield.getText().toLowerCase()), ");
                    _builder.newLineIfNotEmpty();
                    _builder.append("            ");
                    _builder.append("searchTextfield.textProperty()));");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("tableView.setItems(filteredMasterData);");
            _builder.newLine();
            _builder.append("tableView.setOnKeyReleased(e ->{ ");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("if (e.getCode().equals(");
            _builder.append(KeyCode.class, "\t");
            _builder.append(".ESCAPE)) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("setTop(null);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("searchProperty.set(\"\");");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}else if(e.getCode().equals(");
            _builder.append(KeyCode.class, "\t");
            _builder.append(".BACK_SPACE)){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("if(getTop()==null) {");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("setTop(topPane);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("searchTextfield.requestFocus();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}else {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("if(getTop()==null) {");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("setTop(topPane);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("searchProperty.set(searchProperty.get()+e.getText());");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("});");
            _builder.newLine();
            _builder.newLine();
            _builder.append("tableView.getSelectionModel().selectedItemProperty().addListener((");
            _builder.append(ChangeListener.class);
            _builder.append("<");
            _builder.append(model);
            _builder.append(">) (obs, oldV, newV) -> {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("if(newV!=null){");
            _builder.newLine();
            {
              int _size = element.getColumns().size();
              boolean _greaterThan = (_size > 0);
              if (_greaterThan) {
                {
                  int _size_1 = element.getColumns().size();
                  int _minus = (_size_1 - 1);
                  IntegerRange _upTo = new IntegerRange(0, _minus);
                  for(final Integer i : _upTo) {
                    _builder.append("\t\t");
                    _builder.append("properties.get(");
                    _builder.append(i, "\t\t");
                    _builder.append(").setValue(String.valueOf(newV.get");
                    String _firstUpper_3 = StringExtensions.toFirstUpper(element.getColumns().get((i).intValue()).getName());
                    _builder.append(_firstUpper_3, "\t\t");
                    _builder.append("()));");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("\t\t");
            _builder.append("propertyView.refresh();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("});");
            _builder.newLine();
            _builder.newLine();
            {
              final Function1<TableColumnFX, Boolean> _function = (TableColumnFX it_2) -> {
                return Boolean.valueOf(it_2.isUseFilter());
              };
              int _size_2 = IterableExtensions.size(IterableExtensions.<TableColumnFX>filter(element.getColumns(), _function));
              boolean _greaterThan_1 = (_size_2 > 0);
              if (_greaterThan_1) {
                final Function1<TableColumnFX, Boolean> _function_1 = (TableColumnFX it_2) -> {
                  return Boolean.valueOf(it_2.isUseFilter());
                };
                final Function1<TableColumnFX, String> _function_2 = (TableColumnFX it_2) -> {
                  String _firstLower_2 = StringExtensions.toFirstLower(it_2.getName());
                  return (_firstLower_2 + "Filter.get()");
                };
                final Function2<String, String, String> _function_3 = (String p1, String p2) -> {
                  return (((p1 + ".or(") + p2) + ")");
                };
                final String filterbinding = IterableExtensions.<String>reduce(IterableExtensions.<TableColumnFX, String>map(IterableExtensions.<TableColumnFX>filter(element.getColumns(), _function_1), _function_2), _function_3);
                _builder.newLineIfNotEmpty();
                final Function1<TableColumnFX, Boolean> _function_4 = (TableColumnFX it_2) -> {
                  return Boolean.valueOf(it_2.isUseFilter());
                };
                final Function1<TableColumnFX, String> _function_5 = (TableColumnFX it_2) -> {
                  String _firstLower_2 = StringExtensions.toFirstLower(it_2.getName());
                  return (_firstLower_2 + "Filter");
                };
                final Function2<String, String, String> _function_6 = (String p1, String p2) -> {
                  return ((p1 + ",") + p2);
                };
                final String filters = IterableExtensions.<String>reduce(IterableExtensions.<TableColumnFX, String>map(IterableExtensions.<TableColumnFX>filter(element.getColumns(), _function_4), _function_5), _function_6);
                _builder.newLineIfNotEmpty();
                _builder.append("filteredMasterData.predicateProperty().bind(");
                _builder.append(Bindings.class);
                _builder.append(".createObjectBinding(()->");
                _builder.append(filterbinding);
                _builder.append(", ");
                _builder.append(filters);
                _builder.append("));");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(element, "initTableView", this._typeReferenceBuilder.typeRef("void"), _function_13);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_11, _method);
      EList<JvmMember> _members_12 = it.getMembers();
      final Procedure1<JvmOperation> _function_14 = (JvmOperation it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append(TableColumn.class);
            _builder.append("<");
            JvmTypeReference _typeRef = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef("PropertyValue");
            _builder.append(_typeRef);
            _builder.append(", Object> propertyColumn = new TableColumn<>(\"Property\");");
            _builder.newLineIfNotEmpty();
            _builder.append("propertyColumn.setCellValueFactory(new ");
            _builder.append(PropertyValueFactory.class);
            _builder.append("<>(\"property\"));");
            _builder.newLineIfNotEmpty();
            _builder.append("propertyView.getColumns().add(propertyColumn);");
            _builder.newLine();
            _builder.append(TableColumn.class);
            _builder.append("<PropertyValue, Object> valueColumn = new TableColumn<>(\"Value\");");
            _builder.newLineIfNotEmpty();
            _builder.append("valueColumn.setCellValueFactory(new PropertyValueFactory<>(\"value\"));");
            _builder.newLine();
            _builder.append("propertyView.getColumns().add(valueColumn);");
            _builder.newLine();
            _builder.newLine();
            _builder.append(AnchorPane.class);
            _builder.append(".setBottomAnchor(propertyView, 0d);");
            _builder.newLineIfNotEmpty();
            _builder.append("AnchorPane.setTopAnchor(propertyView, 0d);");
            _builder.newLine();
            _builder.append("AnchorPane.setLeftAnchor(propertyView, 0d);");
            _builder.newLine();
            _builder.append("AnchorPane.setRightAnchor(propertyView, 0d);");
            _builder.newLine();
            _builder.append("\t\t\t\t\t\t    ");
            _builder.newLine();
            _builder.append("for (");
            String _simpleName = element.getUsedModel().getSimpleName();
            String _plus = ((packagePath + "model.") + _simpleName);
            String _plus_1 = (_plus + "Type");
            JvmTypeReference _typeRef_1 = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(_plus_1);
            _builder.append(_typeRef_1);
            _builder.append(" type : ");
            String _simpleName_1 = element.getUsedModel().getSimpleName();
            String _plus_2 = ((packagePath + "model.") + _simpleName_1);
            String _plus_3 = (_plus_2 + "Type");
            JvmTypeReference _typeRef_2 = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef(_plus_3);
            _builder.append(_typeRef_2);
            _builder.append(".values()) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("properties.add(new ");
            JvmTypeReference _typeRef_3 = JavaFXDslJvmModelInferrer.this._typeReferenceBuilder.typeRef((packagePath + "model.PropertyValue"));
            _builder.append(_typeRef_3, "\t");
            _builder.append("(type.name(), \"\"));");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
            _builder.append("propertyView.setItems(properties);");
            _builder.newLine();
            _builder.newLine();
            _builder.append("rightPane.getChildren().add(propertyView);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(element, "initRightPane", this._typeReferenceBuilder.typeRef("void"), _function_14);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_12, _method_1);
      EList<JvmMember> _members_13 = it.getMembers();
      final Procedure1<JvmOperation> _function_15 = (JvmOperation it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("topPane.setSpacing(10d);");
            _builder.newLine();
            _builder.append("topPane.setPadding(new ");
            _builder.append(Insets.class);
            _builder.append("(5d));");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append(Label.class);
            _builder.append(" label = new Label(\"Search:\");");
            _builder.newLineIfNotEmpty();
            _builder.append("label.setMaxHeight(");
            _builder.append(Double.class);
            _builder.append(".MAX_VALUE);");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            final Function1<TableColumnFX, Boolean> _function = (TableColumnFX it_2) -> {
              return Boolean.valueOf(it_2.isUseFilter());
            };
            final Function1<TableColumnFX, String> _function_1 = (TableColumnFX it_2) -> {
              return it_2.getName();
            };
            final Function2<String, String, String> _function_2 = (String p1, String p2) -> {
              return ((p1 + ", ") + p2);
            };
            final String searchFields = IterableExtensions.<String>reduce(IterableExtensions.<TableColumnFX, String>map(IterableExtensions.<TableColumnFX>filter(element.getColumns(), _function), _function_1), _function_2);
            _builder.newLineIfNotEmpty();
            _builder.append("searchTextfield.setPromptText(\"Search for ");
            String _simpleName = element.getUsedModel().getSimpleName();
            _builder.append(_simpleName);
            _builder.append("s by ");
            _builder.append(searchFields);
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("searchTextfield.textProperty().bindBidirectional(searchProperty);");
            _builder.newLine();
            _builder.append("HBox.setHgrow(searchTextfield, Priority.ALWAYS);");
            _builder.newLine();
            _builder.newLine();
            _builder.append(Label.class);
            _builder.append(" filterLabel = new Label(\"Filter Result:\");");
            _builder.newLineIfNotEmpty();
            _builder.append("filterLabel.setMaxHeight(");
            _builder.append(Double.class);
            _builder.append(".MAX_VALUE);");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append(Label.class);
            _builder.append(" filterResultlabel = new Label(\"0\");");
            _builder.newLineIfNotEmpty();
            _builder.append("filterResultlabel.setMaxHeight(");
            _builder.append(Double.class);
            _builder.append(".MAX_VALUE);");
            _builder.newLineIfNotEmpty();
            _builder.append("filterResultlabel.textProperty().bind(");
            _builder.append(Bindings.class);
            _builder.append(".size(filteredMasterData).asString());\t\t\t\t\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("Label emtyLabel = new Label(\"\");");
            _builder.newLine();
            _builder.append("emtyLabel.setMaxHeight(Double.MAX_VALUE);");
            _builder.newLine();
            _builder.append("emtyLabel.setMaxWidth(Double.MAX_VALUE);");
            _builder.newLine();
            _builder.append(HBox.class);
            _builder.append(".setHgrow(emtyLabel, ");
            _builder.append(Priority.class);
            _builder.append(".ALWAYS);");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("\t\t\t    ");
            _builder.append(Button.class, "\t\t\t    ");
            _builder.append(" showPropertyButton = new Button(\"Show Property View\");");
            _builder.newLineIfNotEmpty();
            _builder.append("showPropertyButton.setOnAction(e->{");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("if(getRight()==null) {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("setRight(rightPane);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("showPropertyButton.setText(\"Show Property View\");");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}else {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("setRight(null);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("showPropertyButton.setText(\"Hide Property View\");");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("});");
            _builder.newLine();
            _builder.newLine();
            _builder.append(Button.class);
            _builder.append(" closeButton = new Button(\"Close\");");
            _builder.newLineIfNotEmpty();
            _builder.append("closeButton.setOnAction(e -> {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("setTop(null);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("searchProperty.set(\"\");");
            _builder.newLine();
            _builder.append("});");
            _builder.newLine();
            _builder.newLine();
            _builder.append("topPane.getChildren().addAll(label, searchTextfield, filterLabel, filterResultlabel, emtyLabel, showPropertyButton, closeButton);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(element, "initTopPane", this._typeReferenceBuilder.typeRef("void"), _function_15);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_13, _method_2);
      EList<JvmMember> _members_14 = it.getMembers();
      final Procedure1<JvmOperation> _function_16 = (JvmOperation it_1) -> {
        it_1.setVisibility(JvmVisibility.PROTECTED);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "name", this._typeReferenceBuilder.typeRef(String.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(element, "width", this._typeReferenceBuilder.typeRef(Double.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        EList<JvmFormalParameter> _parameters_2 = it_1.getParameters();
        JvmFormalParameter _parameter_2 = this._jvmTypesBuilder.toParameter(element, "cellFeatures", this._typeReferenceBuilder.typeRef(Callback.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_2, _parameter_2);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append(TableColumn.class);
            _builder.append("<");
            _builder.append(model);
            _builder.append(", ");
            _builder.append(model);
            _builder.append("> column = new ");
            _builder.append(TableColumn.class);
            _builder.append("(name);");
            _builder.newLineIfNotEmpty();
            _builder.append("column.setPrefWidth(width);");
            _builder.newLine();
            _builder.append("column.setCellValueFactory(cellFeatures);");
            _builder.newLine();
            _builder.append("columns.put(");
            String _simpleName = element.getUsedModel().getSimpleName();
            String _plus = (_simpleName + "Type");
            _builder.append(_plus);
            _builder.append(".valueOf(name), column);");
            _builder.newLineIfNotEmpty();
            _builder.append("tableView.getColumns().add(column);\t\t");
            _builder.newLine();
            _builder.append("return column;\t");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_3 = this._jvmTypesBuilder.toMethod(element, "createColumn", this._typeReferenceBuilder.typeRef(TableColumn.class), _function_16);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_14, _method_3);
      EList<JvmMember> _members_15 = it.getMembers();
      final Procedure1<JvmOperation> _function_17 = (JvmOperation it_1) -> {
        it_1.setVisibility(JvmVisibility.PUBLIC);
        final JvmFormalParameter arg = TypesFactory.eINSTANCE.createJvmFormalParameter();
        arg.setName("items");
        arg.setParameterType(this._typeReferenceBuilder.typeRef(ObservableList.class, model));
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, arg);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("masterData.clear();");
            _builder.newLine();
            _builder.append("masterData.addAll(items);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_4 = this._jvmTypesBuilder.toMethod(element, "setInput", this._typeReferenceBuilder.typeRef("void"), _function_17);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_15, _method_4);
      EList<JvmMember> _members_16 = it.getMembers();
      final Procedure1<JvmOperation> _function_18 = (JvmOperation it_1) -> {
        it_1.setVisibility(JvmVisibility.PUBLIC);
        final JvmFormalParameter arg1 = TypesFactory.eINSTANCE.createJvmFormalParameter();
        arg1.setName("type");
        String _simpleName_1 = element.getUsedModel().getSimpleName();
        String _plus_3 = ((packagePath + "model.") + _simpleName_1);
        arg1.setParameterType(this._typeReferenceBuilder.typeRef((_plus_3 + "Type")));
        final JvmFormalParameter arg2 = TypesFactory.eINSTANCE.createJvmFormalParameter();
        arg2.setName("feature");
        arg2.setParameterType(this._typeReferenceBuilder.typeRef(Callback.class, this._typeReferenceBuilder.typeRef(TableColumn.CellDataFeatures.class, model, model), this._typeReferenceBuilder.typeRef(ObservableValue.class, model)));
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, arg1);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, arg2);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("columns.get(type).setCellValueFactory(feature);");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_5 = this._jvmTypesBuilder.toMethod(element, "setFeatureFor", this._typeReferenceBuilder.typeRef("void"), _function_18);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_16, _method_5);
      EList<JvmMember> _members_17 = it.getMembers();
      JvmOperation _getter = this._jvmTypesBuilder.toGetter(element, "masterData", this._typeReferenceBuilder.typeRef(ObservableList.class, model));
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_17, _getter);
      EList<JvmMember> _members_18 = it.getMembers();
      JvmOperation _getter_1 = this._jvmTypesBuilder.toGetter(element, "filteredMasterData", this._typeReferenceBuilder.typeRef(FilteredList.class, model));
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_18, _getter_1);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, _plus), _function);
    String _simpleName = element.getUsedModel().getSimpleName();
    String _plus_1 = ((packagePath + "model.") + _simpleName);
    String _plus_2 = (_plus_1 + "Type");
    final Procedure1<JvmEnumerationType> _function_1 = (JvmEnumerationType it) -> {
      EList<TableColumnFX> _columns = element.getColumns();
      for (final TableColumnFX literal : _columns) {
        {
          final JvmEnumerationLiteral jvmLiteral = TypesFactory.eINSTANCE.createJvmEnumerationLiteral();
          jvmLiteral.setSimpleName(literal.getName());
          jvmLiteral.setVisibility(JvmVisibility.PUBLIC);
          jvmLiteral.setStatic(true);
          JvmParameterizedTypeReference t1 = TypesFactory.eINSTANCE.createJvmParameterizedTypeReference();
          t1.setType(it);
          jvmLiteral.setType(t1);
          EList<JvmMember> _members = it.getMembers();
          this._jvmTypesBuilder.<JvmEnumerationLiteral>operator_add(_members, jvmLiteral);
        }
      }
    };
    acceptor.<JvmEnumerationType>accept(this._jvmTypesBuilder.toEnumerationType(element, _plus_2, _function_1));
    String _simpleName_1 = element.getUsedModel().getSimpleName();
    String _plus_3 = ((packagePath + "feature.Base") + _simpleName_1);
    String _plus_4 = (_plus_3 + "CellFeatures");
    final Procedure1<JvmGenericType> _function_2 = (JvmGenericType it) -> {
      String _simpleName_2 = element.getUsedModel().getSimpleName();
      String _plus_5 = ((packagePath + "model.") + _simpleName_2);
      final JvmTypeReference model = this._typeReferenceBuilder.typeRef(_plus_5);
      String _simpleName_3 = element.getUsedModel().getSimpleName();
      String _plus_6 = ((packagePath + "model.") + _simpleName_3);
      String _plus_7 = (_plus_6 + "Type");
      final JvmTypeReference modelType = this._typeReferenceBuilder.typeRef(_plus_7);
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Callback.class, this._typeReferenceBuilder.typeRef(TableColumn.CellDataFeatures.class, model, model), this._typeReferenceBuilder.typeRef(ObservableValue.class, model));
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, Collections.<JvmTypeReference>unmodifiableList(CollectionLiterals.<JvmTypeReference>newArrayList(_typeRef)));
      EList<JvmMember> _members = it.getMembers();
      JvmField _field = this._jvmTypesBuilder.toField(element, "type", modelType);
      this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmConstructor> _function_3 = (JvmConstructor it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "type", modelType);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("this.type = type;");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(element, _function_3);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_1, _constructor);
      EList<JvmMember> _members_2 = it.getMembers();
      final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
        it_1.setVisibility(JvmVisibility.PUBLIC);
        EList<JvmAnnotationReference> _annotations = it_1.getAnnotations();
        JvmAnnotationReference _annotation = this._jvmTypesBuilder.toAnnotation(element, "java.lang.Override");
        this._jvmTypesBuilder.<JvmAnnotationReference>operator_add(_annotations, _annotation);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "feature", this._typeReferenceBuilder.typeRef(TableColumn.CellDataFeatures.class, model, model));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return new ");
            _builder.append(SimpleStringProperty.class);
            _builder.append("(getText(feature.getValue()));");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(element, "call", this._typeReferenceBuilder.typeRef(ObservableValue.class), _function_4);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method);
      EList<JvmMember> _members_3 = it.getMembers();
      final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
        it_1.setVisibility(JvmVisibility.PROTECTED);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "item", model);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("switch (type) {");
            _builder.newLine();
            {
              EList<TableColumnFX> _columns = element.getColumns();
              for(final TableColumnFX c : _columns) {
                _builder.append("\t");
                _builder.append("case ");
                String _name = c.getName();
                _builder.append(_name, "\t");
                _builder.append(":");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("return get");
                String _name_1 = c.getName();
                _builder.append(_name_1, "\t\t");
                _builder.append("(item);");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("default:");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("return \"\";");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(element, "getText", this._typeReferenceBuilder.typeRef(String.class), _function_5);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _method_1);
      EList<TableColumnFX> _columns = element.getColumns();
      for (final TableColumnFX column : _columns) {
        EList<JvmMember> _members_4 = it.getMembers();
        String _name_1 = column.getName();
        String _plus_8 = ("get" + _name_1);
        final Procedure1<JvmOperation> _function_6 = (JvmOperation it_1) -> {
          it_1.setVisibility(JvmVisibility.PROTECTED);
          EList<JvmFormalParameter> _parameters = it_1.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "item", model);
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          StringConcatenationClient _client = new StringConcatenationClient() {
            @Override
            protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
              _builder.append("return ");
              _builder.append(String.class);
              _builder.append(".valueOf(item.get");
              String _name = column.getName();
              _builder.append(_name);
              _builder.append("());");
            }
          };
          this._jvmTypesBuilder.setBody(it_1, _client);
        };
        JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(element, _plus_8, this._typeReferenceBuilder.typeRef(String.class), _function_6);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, _method_2);
      }
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, _plus_4, _function_2));
    final Procedure1<JvmGenericType> _function_3 = (JvmGenericType it) -> {
      EList<JvmMember> _members = it.getMembers();
      JvmField _field = this._jvmTypesBuilder.toField(element, "property", this._typeReferenceBuilder.typeRef(String.class));
      this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      EList<JvmMember> _members_1 = it.getMembers();
      JvmOperation _getter = this._jvmTypesBuilder.toGetter(element, "property", this._typeReferenceBuilder.typeRef(String.class));
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _getter);
      EList<JvmMember> _members_2 = it.getMembers();
      JvmOperation _setter = this._jvmTypesBuilder.toSetter(element, "property", this._typeReferenceBuilder.typeRef(String.class));
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _setter);
      EList<JvmMember> _members_3 = it.getMembers();
      JvmField _field_1 = this._jvmTypesBuilder.toField(element, "value", this._typeReferenceBuilder.typeRef(String.class));
      this._jvmTypesBuilder.<JvmField>operator_add(_members_3, _field_1);
      EList<JvmMember> _members_4 = it.getMembers();
      JvmOperation _getter_1 = this._jvmTypesBuilder.toGetter(element, "value", this._typeReferenceBuilder.typeRef(String.class));
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, _getter_1);
      EList<JvmMember> _members_5 = it.getMembers();
      JvmOperation _setter_1 = this._jvmTypesBuilder.toSetter(element, "value", this._typeReferenceBuilder.typeRef(String.class));
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_5, _setter_1);
      EList<JvmMember> _members_6 = it.getMembers();
      final Procedure1<JvmConstructor> _function_4 = (JvmConstructor it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "property", this._typeReferenceBuilder.typeRef(String.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(element, "value", this._typeReferenceBuilder.typeRef(String.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("this.property = property;");
            _builder.newLine();
            _builder.append("this.value = value;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(element, _function_4);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_6, _constructor);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, (packagePath + "model.PropertyValue"), _function_3));
  }
  
  protected void _infer(final Bean element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    EObject _rootContainer = EcoreUtil.getRootContainer(element);
    String _packagePath = ((ProjectFX) _rootContainer).getPackagePath();
    final String packagePath = (_packagePath + ".");
    String _name = element.getName();
    String _plus = (packagePath + _name);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      final Consumer<AttributeFX> _function_1 = (AttributeFX attribute) -> {
        EList<JvmMember> _members = it.getMembers();
        JvmField _field = this._jvmTypesBuilder.toField(element, StringExtensions.toFirstLower(attribute.getName()), this._typeReferenceBuilder.typeRef(attribute.getType()));
        this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
        if ((((Objects.equal(attribute.getType(), "Boolean") || Objects.equal(attribute.getType(), "boolean")) || Objects.equal(attribute.getType(), "Bool")) || Objects.equal(attribute.getType(), "bool"))) {
          EList<JvmMember> _members_1 = it.getMembers();
          String _firstUpper = StringExtensions.toFirstUpper(attribute.getName());
          String _plus_1 = ("get" + _firstUpper);
          final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
            it_1.setVisibility(JvmVisibility.PUBLIC);
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("return this.");
                String _firstLower = StringExtensions.toFirstLower(attribute.getName());
                _builder.append(_firstLower);
                _builder.append(";");
              }
            };
            this._jvmTypesBuilder.setBody(it_1, _client);
          };
          JvmOperation _method = this._jvmTypesBuilder.toMethod(element, _plus_1, this._typeReferenceBuilder.typeRef(attribute.getType()), _function_2);
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
        } else {
          EList<JvmMember> _members_2 = it.getMembers();
          JvmOperation _getter = this._jvmTypesBuilder.toGetter(element, StringExtensions.toFirstLower(attribute.getName()), this._typeReferenceBuilder.typeRef(attribute.getType()));
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _getter);
        }
        EList<JvmMember> _members_3 = it.getMembers();
        JvmOperation _setter = this._jvmTypesBuilder.toSetter(element, StringExtensions.toFirstLower(attribute.getName()), this._typeReferenceBuilder.typeRef(attribute.getType()));
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _setter);
      };
      element.getAttributes().forEach(_function_1);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, _plus), _function);
  }
  
  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (element instanceof Bean) {
      _infer((Bean)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element instanceof TableViewFX) {
      _infer((TableViewFX)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element instanceof ProjectFX) {
      _infer((ProjectFX)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element != null) {
      _infer(element, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
    }
  }
}
