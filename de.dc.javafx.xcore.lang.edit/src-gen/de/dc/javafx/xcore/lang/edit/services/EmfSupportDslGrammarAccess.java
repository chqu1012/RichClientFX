/*
 * generated by Xtext 2.17.0
 */
package de.dc.javafx.xcore.lang.edit.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class EmfSupportDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.Model");
		private final Assignment cEcoreAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEcoreEcoreParserRuleCall_0 = (RuleCall)cEcoreAssignment.eContents().get(0);
		
		//Model:
		//	ecore+=Ecore*;
		@Override public ParserRule getRule() { return rule; }
		
		//ecore+=Ecore*
		public Assignment getEcoreAssignment() { return cEcoreAssignment; }
		
		//Ecore
		public RuleCall getEcoreEcoreParserRuleCall_0() { return cEcoreEcoreParserRuleCall_0; }
	}
	public class EcoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.Ecore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEMFSupportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPackagePathKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPackagePathAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPackagePathEStringParserRuleCall_5_0 = (RuleCall)cPackagePathAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cModelItemProviderAdapterFactoryKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cModelItemProviderAdapterFactoryAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cModelItemProviderAdapterFactoryJvmTypeReferenceParserRuleCall_8_0 = (RuleCall)cModelItemProviderAdapterFactoryAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cModelPackageKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cModelPackageAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cModelPackageJvmTypeReferenceParserRuleCall_11_0 = (RuleCall)cModelPackageAssignment_11.eContents().get(0);
		private final Keyword cCommaKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cModelFactoryKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cModelFactoryAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cModelFactoryJvmTypeReferenceParserRuleCall_14_0 = (RuleCall)cModelFactoryAssignment_14.eContents().get(0);
		private final Keyword cCommaKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cRootTypeKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cRootTypeAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cRootTypeJvmTypeReferenceParserRuleCall_17_0 = (RuleCall)cRootTypeAssignment_17.eContents().get(0);
		private final Keyword cCommaKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cUseUndoRedoKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Assignment cUseUndoRedoAssignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cUseUndoRedoEBooleanParserRuleCall_20_0 = (RuleCall)cUseUndoRedoAssignment_20.eContents().get(0);
		private final Keyword cCommaKeyword_21 = (Keyword)cGroup.eContents().get(21);
		private final Keyword cShowCommandStackKeyword_22 = (Keyword)cGroup.eContents().get(22);
		private final Assignment cShowCommandStackAssignment_23 = (Assignment)cGroup.eContents().get(23);
		private final RuleCall cShowCommandStackEBooleanParserRuleCall_23_0 = (RuleCall)cShowCommandStackAssignment_23.eContents().get(0);
		private final Keyword cCommaKeyword_24 = (Keyword)cGroup.eContents().get(24);
		private final Keyword cShowPropertyViewKeyword_25 = (Keyword)cGroup.eContents().get(25);
		private final Assignment cShowPropertyViewAssignment_26 = (Assignment)cGroup.eContents().get(26);
		private final RuleCall cShowPropertyViewEBooleanParserRuleCall_26_0 = (RuleCall)cShowPropertyViewAssignment_26.eContents().get(0);
		private final Keyword cCommaKeyword_27 = (Keyword)cGroup.eContents().get(27);
		private final Keyword cGenerateDemoKeyword_28 = (Keyword)cGroup.eContents().get(28);
		private final Assignment cGenerateDemoAssignment_29 = (Assignment)cGroup.eContents().get(29);
		private final RuleCall cGenerateDemoEBooleanParserRuleCall_29_0 = (RuleCall)cGenerateDemoAssignment_29.eContents().get(0);
		private final Keyword cCommaKeyword_30 = (Keyword)cGroup.eContents().get(30);
		private final Group cGroup_31 = (Group)cGroup.eContents().get(31);
		private final Keyword cEditablesKeyword_31_0 = (Keyword)cGroup_31.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_31_1 = (Keyword)cGroup_31.eContents().get(1);
		private final Assignment cEditablesAssignment_31_2 = (Assignment)cGroup_31.eContents().get(2);
		private final RuleCall cEditablesEditableEAttributesParserRuleCall_31_2_0 = (RuleCall)cEditablesAssignment_31_2.eContents().get(0);
		private final Keyword cCommaKeyword_31_3 = (Keyword)cGroup_31.eContents().get(3);
		private final Group cGroup_32 = (Group)cGroup.eContents().get(32);
		private final Keyword cContextMenusKeyword_32_0 = (Keyword)cGroup_32.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_32_1 = (Keyword)cGroup_32.eContents().get(1);
		private final Assignment cContextMenusAssignment_32_2 = (Assignment)cGroup_32.eContents().get(2);
		private final RuleCall cContextMenusContextMenuParserRuleCall_32_2_0 = (RuleCall)cContextMenusAssignment_32_2.eContents().get(0);
		private final Keyword cCommaKeyword_32_3 = (Keyword)cGroup_32.eContents().get(3);
		private final Group cGroup_33 = (Group)cGroup.eContents().get(33);
		private final Keyword cControlsKeyword_33_0 = (Keyword)cGroup_33.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_33_1 = (Keyword)cGroup_33.eContents().get(1);
		private final Assignment cSupportedControlsAssignment_33_2 = (Assignment)cGroup_33.eContents().get(2);
		private final RuleCall cSupportedControlsSupportedControlParserRuleCall_33_2_0 = (RuleCall)cSupportedControlsAssignment_33_2.eContents().get(0);
		private final Keyword cCommaKeyword_33_3 = (Keyword)cGroup_33.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_34 = (Keyword)cGroup.eContents().get(34);
		
		//Ecore:
		//	'EMFSupport' 'for' name=EString
		//	'{'
		//	'packagePath:' packagePath=EString ','?
		//	'modelItemProviderAdapterFactory:' modelItemProviderAdapterFactory=JvmTypeReference ','?
		//	'modelPackage:' modelPackage=JvmTypeReference ','?
		//	'modelFactory:' modelFactory=JvmTypeReference ','?
		//	'rootType:' rootType=JvmTypeReference ','?
		//	'useUndoRedo:' useUndoRedo=EBoolean ','?
		//	'showCommandStack:' showCommandStack=EBoolean ','?
		//	'showPropertyView:' showPropertyView=EBoolean ','?
		//	'generateDemo:' generateDemo=EBoolean ','? ('editables' '+=' editables+=EditableEAttributes ','?)* ('contextMenus'
		//	'+=' contextMenus+=ContextMenu ','?)* ('controls' '+=' supportedControls+=SupportedControl ','?)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'EMFSupport' 'for' name=EString '{' 'packagePath:' packagePath=EString ','? 'modelItemProviderAdapterFactory:'
		//modelItemProviderAdapterFactory=JvmTypeReference ','? 'modelPackage:' modelPackage=JvmTypeReference ','?
		//'modelFactory:' modelFactory=JvmTypeReference ','? 'rootType:' rootType=JvmTypeReference ','? 'useUndoRedo:'
		//useUndoRedo=EBoolean ','? 'showCommandStack:' showCommandStack=EBoolean ','? 'showPropertyView:'
		//showPropertyView=EBoolean ','? 'generateDemo:' generateDemo=EBoolean ','? ('editables' '+='
		//editables+=EditableEAttributes ','?)* ('contextMenus' '+=' contextMenus+=ContextMenu ','?)* ('controls' '+='
		//supportedControls+=SupportedControl ','?)* '}'
		public Group getGroup() { return cGroup; }
		
		//'EMFSupport'
		public Keyword getEMFSupportKeyword_0() { return cEMFSupportKeyword_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'packagePath:'
		public Keyword getPackagePathKeyword_4() { return cPackagePathKeyword_4; }
		
		//packagePath=EString
		public Assignment getPackagePathAssignment_5() { return cPackagePathAssignment_5; }
		
		//EString
		public RuleCall getPackagePathEStringParserRuleCall_5_0() { return cPackagePathEStringParserRuleCall_5_0; }
		
		//','?
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//'modelItemProviderAdapterFactory:'
		public Keyword getModelItemProviderAdapterFactoryKeyword_7() { return cModelItemProviderAdapterFactoryKeyword_7; }
		
		//modelItemProviderAdapterFactory=JvmTypeReference
		public Assignment getModelItemProviderAdapterFactoryAssignment_8() { return cModelItemProviderAdapterFactoryAssignment_8; }
		
		//JvmTypeReference
		public RuleCall getModelItemProviderAdapterFactoryJvmTypeReferenceParserRuleCall_8_0() { return cModelItemProviderAdapterFactoryJvmTypeReferenceParserRuleCall_8_0; }
		
		//','?
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//'modelPackage:'
		public Keyword getModelPackageKeyword_10() { return cModelPackageKeyword_10; }
		
		//modelPackage=JvmTypeReference
		public Assignment getModelPackageAssignment_11() { return cModelPackageAssignment_11; }
		
		//JvmTypeReference
		public RuleCall getModelPackageJvmTypeReferenceParserRuleCall_11_0() { return cModelPackageJvmTypeReferenceParserRuleCall_11_0; }
		
		//','?
		public Keyword getCommaKeyword_12() { return cCommaKeyword_12; }
		
		//'modelFactory:'
		public Keyword getModelFactoryKeyword_13() { return cModelFactoryKeyword_13; }
		
		//modelFactory=JvmTypeReference
		public Assignment getModelFactoryAssignment_14() { return cModelFactoryAssignment_14; }
		
		//JvmTypeReference
		public RuleCall getModelFactoryJvmTypeReferenceParserRuleCall_14_0() { return cModelFactoryJvmTypeReferenceParserRuleCall_14_0; }
		
		//','?
		public Keyword getCommaKeyword_15() { return cCommaKeyword_15; }
		
		//'rootType:'
		public Keyword getRootTypeKeyword_16() { return cRootTypeKeyword_16; }
		
		//rootType=JvmTypeReference
		public Assignment getRootTypeAssignment_17() { return cRootTypeAssignment_17; }
		
		//JvmTypeReference
		public RuleCall getRootTypeJvmTypeReferenceParserRuleCall_17_0() { return cRootTypeJvmTypeReferenceParserRuleCall_17_0; }
		
		//','?
		public Keyword getCommaKeyword_18() { return cCommaKeyword_18; }
		
		//'useUndoRedo:'
		public Keyword getUseUndoRedoKeyword_19() { return cUseUndoRedoKeyword_19; }
		
		//useUndoRedo=EBoolean
		public Assignment getUseUndoRedoAssignment_20() { return cUseUndoRedoAssignment_20; }
		
		//EBoolean
		public RuleCall getUseUndoRedoEBooleanParserRuleCall_20_0() { return cUseUndoRedoEBooleanParserRuleCall_20_0; }
		
		//','?
		public Keyword getCommaKeyword_21() { return cCommaKeyword_21; }
		
		//'showCommandStack:'
		public Keyword getShowCommandStackKeyword_22() { return cShowCommandStackKeyword_22; }
		
		//showCommandStack=EBoolean
		public Assignment getShowCommandStackAssignment_23() { return cShowCommandStackAssignment_23; }
		
		//EBoolean
		public RuleCall getShowCommandStackEBooleanParserRuleCall_23_0() { return cShowCommandStackEBooleanParserRuleCall_23_0; }
		
		//','?
		public Keyword getCommaKeyword_24() { return cCommaKeyword_24; }
		
		//'showPropertyView:'
		public Keyword getShowPropertyViewKeyword_25() { return cShowPropertyViewKeyword_25; }
		
		//showPropertyView=EBoolean
		public Assignment getShowPropertyViewAssignment_26() { return cShowPropertyViewAssignment_26; }
		
		//EBoolean
		public RuleCall getShowPropertyViewEBooleanParserRuleCall_26_0() { return cShowPropertyViewEBooleanParserRuleCall_26_0; }
		
		//','?
		public Keyword getCommaKeyword_27() { return cCommaKeyword_27; }
		
		//'generateDemo:'
		public Keyword getGenerateDemoKeyword_28() { return cGenerateDemoKeyword_28; }
		
		//generateDemo=EBoolean
		public Assignment getGenerateDemoAssignment_29() { return cGenerateDemoAssignment_29; }
		
		//EBoolean
		public RuleCall getGenerateDemoEBooleanParserRuleCall_29_0() { return cGenerateDemoEBooleanParserRuleCall_29_0; }
		
		//','?
		public Keyword getCommaKeyword_30() { return cCommaKeyword_30; }
		
		//('editables' '+=' editables+=EditableEAttributes ','?)*
		public Group getGroup_31() { return cGroup_31; }
		
		//'editables'
		public Keyword getEditablesKeyword_31_0() { return cEditablesKeyword_31_0; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_31_1() { return cPlusSignEqualsSignKeyword_31_1; }
		
		//editables+=EditableEAttributes
		public Assignment getEditablesAssignment_31_2() { return cEditablesAssignment_31_2; }
		
		//EditableEAttributes
		public RuleCall getEditablesEditableEAttributesParserRuleCall_31_2_0() { return cEditablesEditableEAttributesParserRuleCall_31_2_0; }
		
		//','?
		public Keyword getCommaKeyword_31_3() { return cCommaKeyword_31_3; }
		
		//('contextMenus' '+=' contextMenus+=ContextMenu ','?)*
		public Group getGroup_32() { return cGroup_32; }
		
		//'contextMenus'
		public Keyword getContextMenusKeyword_32_0() { return cContextMenusKeyword_32_0; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_32_1() { return cPlusSignEqualsSignKeyword_32_1; }
		
		//contextMenus+=ContextMenu
		public Assignment getContextMenusAssignment_32_2() { return cContextMenusAssignment_32_2; }
		
		//ContextMenu
		public RuleCall getContextMenusContextMenuParserRuleCall_32_2_0() { return cContextMenusContextMenuParserRuleCall_32_2_0; }
		
		//','?
		public Keyword getCommaKeyword_32_3() { return cCommaKeyword_32_3; }
		
		//('controls' '+=' supportedControls+=SupportedControl ','?)*
		public Group getGroup_33() { return cGroup_33; }
		
		//'controls'
		public Keyword getControlsKeyword_33_0() { return cControlsKeyword_33_0; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_33_1() { return cPlusSignEqualsSignKeyword_33_1; }
		
		//supportedControls+=SupportedControl
		public Assignment getSupportedControlsAssignment_33_2() { return cSupportedControlsAssignment_33_2; }
		
		//SupportedControl
		public RuleCall getSupportedControlsSupportedControlParserRuleCall_33_2_0() { return cSupportedControlsSupportedControlParserRuleCall_33_2_0; }
		
		//','?
		public Keyword getCommaKeyword_33_3() { return cCommaKeyword_33_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_34() { return cRightCurlyBracketKeyword_34; }
	}
	public class EditableEAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.EditableEAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EditableEAttributes:
		//	'EAttribute' '(' name=EString ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'EAttribute' '(' name=EString ')'
		public Group getGroup() { return cGroup; }
		
		//'EAttribute'
		public Keyword getEAttributeKeyword_0() { return cEAttributeKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ContextMenuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.ContextMenu");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddContextMenuParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCopyContextMenuParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ContextMenu:
		//	AddContextMenu | CopyContextMenu;
		@Override public ParserRule getRule() { return rule; }
		
		//AddContextMenu | CopyContextMenu
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddContextMenu
		public RuleCall getAddContextMenuParserRuleCall_0() { return cAddContextMenuParserRuleCall_0; }
		
		//CopyContextMenu
		public RuleCall getCopyContextMenuParserRuleCall_1() { return cCopyContextMenuParserRuleCall_1; }
	}
	public class CopyContextMenuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.CopyContextMenu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCopyContextMenuKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIdKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdEStringParserRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CopyContextMenu:
		//	'copyContextMenu' '('
		//	'id:' id=EString ','?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'copyContextMenu' '(' 'id:' id=EString ','? ')'
		public Group getGroup() { return cGroup; }
		
		//'copyContextMenu'
		public Keyword getCopyContextMenuKeyword_0() { return cCopyContextMenuKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'id:'
		public Keyword getIdKeyword_2() { return cIdKeyword_2; }
		
		//id=EString
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_3_0() { return cIdEStringParserRuleCall_3_0; }
		
		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AddContextMenuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.AddContextMenu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddContextMenuKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIdKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdEStringParserRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cParentTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParentTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParentTypeJvmTypeReferenceParserRuleCall_6_0 = (RuleCall)cParentTypeAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cCreateTypeKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCreateTypeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCreateTypeJvmTypeReferenceParserRuleCall_9_0 = (RuleCall)cCreateTypeAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//AddContextMenu:
		//	'addContextMenu' '('
		//	'id:' id=EString ','?
		//	'parentType:' parentType=JvmTypeReference ','?
		//	'createType:' createType=JvmTypeReference ','?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'addContextMenu' '(' 'id:' id=EString ','? 'parentType:' parentType=JvmTypeReference ','? 'createType:'
		//createType=JvmTypeReference ','? ')'
		public Group getGroup() { return cGroup; }
		
		//'addContextMenu'
		public Keyword getAddContextMenuKeyword_0() { return cAddContextMenuKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'id:'
		public Keyword getIdKeyword_2() { return cIdKeyword_2; }
		
		//id=EString
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_3_0() { return cIdEStringParserRuleCall_3_0; }
		
		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'parentType:'
		public Keyword getParentTypeKeyword_5() { return cParentTypeKeyword_5; }
		
		//parentType=JvmTypeReference
		public Assignment getParentTypeAssignment_6() { return cParentTypeAssignment_6; }
		
		//JvmTypeReference
		public RuleCall getParentTypeJvmTypeReferenceParserRuleCall_6_0() { return cParentTypeJvmTypeReferenceParserRuleCall_6_0; }
		
		//','?
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//'createType:'
		public Keyword getCreateTypeKeyword_8() { return cCreateTypeKeyword_8; }
		
		//createType=JvmTypeReference
		public Assignment getCreateTypeAssignment_9() { return cCreateTypeAssignment_9; }
		
		//JvmTypeReference
		public RuleCall getCreateTypeJvmTypeReferenceParserRuleCall_9_0() { return cCreateTypeJvmTypeReferenceParserRuleCall_9_0; }
		
		//','?
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
	}
	public class SupportedControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.SupportedControl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTableViewFXParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTreeViewFXParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListViewFXParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SupportedControl:
		//	TableViewFX | TreeViewFX | ListViewFX;
		@Override public ParserRule getRule() { return rule; }
		
		//TableViewFX | TreeViewFX | ListViewFX
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TableViewFX
		public RuleCall getTableViewFXParserRuleCall_0() { return cTableViewFXParserRuleCall_0; }
		
		//TreeViewFX
		public RuleCall getTreeViewFXParserRuleCall_1() { return cTreeViewFXParserRuleCall_1; }
		
		//ListViewFX
		public RuleCall getListViewFXParserRuleCall_2() { return cListViewFXParserRuleCall_2; }
	}
	public class TreeViewFXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.TreeViewFX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTreeViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cModelKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cModelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cModelJvmTypeReferenceParserRuleCall_6_0 = (RuleCall)cModelAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TreeViewFX:
		//	'TreeView' '(' 'name:' name=EString ','? 'model:' model=JvmTypeReference ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'TreeView' '(' 'name:' name=EString ','? 'model:' model=JvmTypeReference ')'
		public Group getGroup() { return cGroup; }
		
		//'TreeView'
		public Keyword getTreeViewKeyword_0() { return cTreeViewKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'name:'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'model:'
		public Keyword getModelKeyword_5() { return cModelKeyword_5; }
		
		//model=JvmTypeReference
		public Assignment getModelAssignment_6() { return cModelAssignment_6; }
		
		//JvmTypeReference
		public RuleCall getModelJvmTypeReferenceParserRuleCall_6_0() { return cModelJvmTypeReferenceParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ListViewFXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.ListViewFX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cModelKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cModelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cModelJvmTypeReferenceParserRuleCall_6_0 = (RuleCall)cModelAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ListViewFX:
		//	'ListView' '(' 'name:' name=EString ','? 'model:' model=JvmTypeReference ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ListView' '(' 'name:' name=EString ','? 'model:' model=JvmTypeReference ')'
		public Group getGroup() { return cGroup; }
		
		//'ListView'
		public Keyword getListViewKeyword_0() { return cListViewKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'name:'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'model:'
		public Keyword getModelKeyword_5() { return cModelKeyword_5; }
		
		//model=JvmTypeReference
		public Assignment getModelAssignment_6() { return cModelAssignment_6; }
		
		//JvmTypeReference
		public RuleCall getModelJvmTypeReferenceParserRuleCall_6_0() { return cModelJvmTypeReferenceParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class TableViewFXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.TableViewFX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cModelKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cModelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cModelJvmTypeReferenceParserRuleCall_6_0 = (RuleCall)cModelAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TableViewFX:
		//	'TableView' '(' 'name:' name=EString ','? 'model:' model=JvmTypeReference ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'TableView' '(' 'name:' name=EString ','? 'model:' model=JvmTypeReference ')'
		public Group getGroup() { return cGroup; }
		
		//'TableView'
		public Keyword getTableViewKeyword_0() { return cTableViewKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'name:'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'model:'
		public Keyword getModelKeyword_5() { return cModelKeyword_5; }
		
		//model=JvmTypeReference
		public Assignment getModelAssignment_6() { return cModelAssignment_6; }
		
		//JvmTypeReference
		public RuleCall getModelJvmTypeReferenceParserRuleCall_6_0() { return cModelJvmTypeReferenceParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class TreeTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.TreeTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTreeTableViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TreeTable:
		//	'TreeTableView' '(' 'name:' name=EString ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'TreeTableView' '(' 'name:' name=EString ')'
		public Group getGroup() { return cGroup; }
		
		//'TreeTableView'
		public Keyword getTreeTableViewKeyword_0() { return cTreeTableViewKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'name:'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.javafx.xcore.lang.edit.EmfSupportDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final EcoreElements pEcore;
	private final EditableEAttributesElements pEditableEAttributes;
	private final ContextMenuElements pContextMenu;
	private final CopyContextMenuElements pCopyContextMenu;
	private final AddContextMenuElements pAddContextMenu;
	private final SupportedControlElements pSupportedControl;
	private final TreeViewFXElements pTreeViewFX;
	private final ListViewFXElements pListViewFX;
	private final TableViewFXElements pTableViewFX;
	private final TreeTableElements pTreeTable;
	private final EBooleanElements pEBoolean;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public EmfSupportDslGrammarAccess(GrammarProvider grammarProvider,
			XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pModel = new ModelElements();
		this.pEcore = new EcoreElements();
		this.pEditableEAttributes = new EditableEAttributesElements();
		this.pContextMenu = new ContextMenuElements();
		this.pCopyContextMenu = new CopyContextMenuElements();
		this.pAddContextMenu = new AddContextMenuElements();
		this.pSupportedControl = new SupportedControlElements();
		this.pTreeViewFX = new TreeViewFXElements();
		this.pListViewFX = new ListViewFXElements();
		this.pTableViewFX = new TableViewFXElements();
		this.pTreeTable = new TreeTableElements();
		this.pEBoolean = new EBooleanElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.dc.javafx.xcore.lang.edit.EmfSupportDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Model:
	//	ecore+=Ecore*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Ecore:
	//	'EMFSupport' 'for' name=EString
	//	'{'
	//	'packagePath:' packagePath=EString ','?
	//	'modelItemProviderAdapterFactory:' modelItemProviderAdapterFactory=JvmTypeReference ','?
	//	'modelPackage:' modelPackage=JvmTypeReference ','?
	//	'modelFactory:' modelFactory=JvmTypeReference ','?
	//	'rootType:' rootType=JvmTypeReference ','?
	//	'useUndoRedo:' useUndoRedo=EBoolean ','?
	//	'showCommandStack:' showCommandStack=EBoolean ','?
	//	'showPropertyView:' showPropertyView=EBoolean ','?
	//	'generateDemo:' generateDemo=EBoolean ','? ('editables' '+=' editables+=EditableEAttributes ','?)* ('contextMenus'
	//	'+=' contextMenus+=ContextMenu ','?)* ('controls' '+=' supportedControls+=SupportedControl ','?)*
	//	'}';
	public EcoreElements getEcoreAccess() {
		return pEcore;
	}
	
	public ParserRule getEcoreRule() {
		return getEcoreAccess().getRule();
	}
	
	//EditableEAttributes:
	//	'EAttribute' '(' name=EString ')';
	public EditableEAttributesElements getEditableEAttributesAccess() {
		return pEditableEAttributes;
	}
	
	public ParserRule getEditableEAttributesRule() {
		return getEditableEAttributesAccess().getRule();
	}
	
	//ContextMenu:
	//	AddContextMenu | CopyContextMenu;
	public ContextMenuElements getContextMenuAccess() {
		return pContextMenu;
	}
	
	public ParserRule getContextMenuRule() {
		return getContextMenuAccess().getRule();
	}
	
	//CopyContextMenu:
	//	'copyContextMenu' '('
	//	'id:' id=EString ','?
	//	')';
	public CopyContextMenuElements getCopyContextMenuAccess() {
		return pCopyContextMenu;
	}
	
	public ParserRule getCopyContextMenuRule() {
		return getCopyContextMenuAccess().getRule();
	}
	
	//AddContextMenu:
	//	'addContextMenu' '('
	//	'id:' id=EString ','?
	//	'parentType:' parentType=JvmTypeReference ','?
	//	'createType:' createType=JvmTypeReference ','?
	//	')';
	public AddContextMenuElements getAddContextMenuAccess() {
		return pAddContextMenu;
	}
	
	public ParserRule getAddContextMenuRule() {
		return getAddContextMenuAccess().getRule();
	}
	
	//SupportedControl:
	//	TableViewFX | TreeViewFX | ListViewFX;
	public SupportedControlElements getSupportedControlAccess() {
		return pSupportedControl;
	}
	
	public ParserRule getSupportedControlRule() {
		return getSupportedControlAccess().getRule();
	}
	
	//TreeViewFX:
	//	'TreeView' '(' 'name:' name=EString ','? 'model:' model=JvmTypeReference ')';
	public TreeViewFXElements getTreeViewFXAccess() {
		return pTreeViewFX;
	}
	
	public ParserRule getTreeViewFXRule() {
		return getTreeViewFXAccess().getRule();
	}
	
	//ListViewFX:
	//	'ListView' '(' 'name:' name=EString ','? 'model:' model=JvmTypeReference ')';
	public ListViewFXElements getListViewFXAccess() {
		return pListViewFX;
	}
	
	public ParserRule getListViewFXRule() {
		return getListViewFXAccess().getRule();
	}
	
	//TableViewFX:
	//	'TableView' '(' 'name:' name=EString ','? 'model:' model=JvmTypeReference ')';
	public TableViewFXElements getTableViewFXAccess() {
		return pTableViewFX;
	}
	
	public ParserRule getTableViewFXRule() {
		return getTableViewFXAccess().getRule();
	}
	
	//TreeTable:
	//	'TreeTableView' '(' 'name:' name=EString ')';
	public TreeTableElements getTreeTableAccess() {
		return pTreeTable;
	}
	
	public ParserRule getTreeTableRule() {
		return getTreeTableAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//XAnnotation:
	//	{XAnnotation} '@' annotationType=[types::JvmAnnotationType|QualifiedName] (=> '('
	//	(elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValueOrCommaList)? ')')?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}
	
	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] '=') value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}
	
	//XAnnotationElementValueOrCommaList xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression)+)?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}
	
	//XAnnotationElementValue xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}
	
	//XAnnotationOrExpression xbase::XExpression:
	//	XAnnotation | XExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
