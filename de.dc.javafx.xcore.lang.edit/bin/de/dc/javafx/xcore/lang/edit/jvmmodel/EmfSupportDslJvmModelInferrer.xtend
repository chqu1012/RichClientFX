/*
 * generated by Xtext 2.17.0
 */
package de.dc.javafx.xcore.lang.edit.jvmmodel

import com.google.inject.Inject
import de.dc.javafx.xcore.lang.edit.emfSupportDsl.Model
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import org.eclipse.emf.edit.domain.EditingDomain
import org.eclipse.emf.edit.provider.ComposedAdapterFactory
import org.eclipse.emf.ecore.change.util.ChangeRecorder

class EmfSupportDslJvmModelInferrer extends AbstractModelInferrer {

	@Inject extension JvmTypesBuilder

	def dispatch void infer(Model element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		for(model : element.ecore){
			val name = model.name
	 		acceptor.accept(element.toClass(name+'Manager')[
	 			members += element.toField('root', model.rootType)
	 			members += element.toField('editingDomain', EditingDomain.typeRef)
	 			members += element.toField('adapterFactory', ComposedAdapterFactory.typeRef)
	 			members += element.toField('changeRecorder', ChangeRecorder.typeRef)
//	 			members += element.toField('commandStack', CommandStackImpl.typeRef)
	 			
	 			members += element.toGetter('root', model.rootType)
	 			members += element.toGetter('editingDomain', EditingDomain.typeRef)
	 			members += element.toGetter('adapterFactory', ComposedAdapterFactory.typeRef)
	 			members += element.toGetter('changeRecorder', ChangeRecorder.typeRef)
//	 			members += element.toGetter('getCommandStack', CommandStackImpl.typeRef)
	 		])
		}
	}
}
