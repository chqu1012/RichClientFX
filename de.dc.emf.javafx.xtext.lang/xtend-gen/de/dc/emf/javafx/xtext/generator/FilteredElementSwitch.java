package de.dc.emf.javafx.xtext.generator;

import de.dc.emf.javafx.model.javafx.ProjectFX;
import de.dc.emf.javafx.model.javafx.TableColumnFX;
import de.dc.emf.javafx.model.javafx.TableViewFX;
import de.dc.emf.javafx.model.javafx.util.JavafxSwitch;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class FilteredElementSwitch extends JavafxSwitch<String> {
  @Override
  public String caseTableViewFX(final TableViewFX object) {
    StringConcatenation _builder = new StringConcatenation();
    EObject _rootContainer = EcoreUtil.getRootContainer(object);
    final String packagePath = ((ProjectFX) _rootContainer).getPackagePath();
    _builder.newLineIfNotEmpty();
    _builder.append("package ");
    _builder.append(packagePath);
    _builder.append(".controls;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    _builder.append(packagePath);
    _builder.append(".model.*;");
    _builder.newLineIfNotEmpty();
    _builder.append("import javafx.beans.binding.Bindings;");
    _builder.newLine();
    _builder.append("import javafx.collections.*;");
    _builder.newLine();
    _builder.append("import javafx.collections.transformation.FilteredList;");
    _builder.newLine();
    _builder.append("import javafx.scene.control.*;");
    _builder.newLine();
    _builder.append("import javafx.scene.layout.*;");
    _builder.newLine();
    final String tableName = StringExtensions.toFirstUpper(object.getName());
    _builder.newLineIfNotEmpty();
    final String modelName = StringExtensions.toFirstUpper(object.getUsedModel().getName());
    _builder.newLineIfNotEmpty();
    _builder.append("public class Filtered");
    _builder.append(tableName);
    _builder.append(" extends VBox {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected boolean showFilterText = true;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected boolean showCountOfItemsLabel = true;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private TextField searchText;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    _builder.append(tableName, "\t");
    _builder.append(" ");
    String _firstLower = StringExtensions.toFirstLower(object.getName());
    _builder.append(_firstLower, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ObservableList<");
    _builder.append(modelName, "\t");
    _builder.append("> ");
    String _firstLower_1 = StringExtensions.toFirstLower(modelName);
    _builder.append(_firstLower_1, "\t");
    _builder.append("List = FXCollections.observableArrayList();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private FilteredList<");
    _builder.append(modelName, "\t");
    _builder.append("> ");
    String _firstLower_2 = StringExtensions.toFirstLower(modelName);
    _builder.append(_firstLower_2, "\t");
    _builder.append("FilteredList = new FilteredList<>(");
    String _firstLower_3 = StringExtensions.toFirstLower(modelName);
    _builder.append(_firstLower_3, "\t");
    _builder.append("List, p->true);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Filtered");
    _builder.append(tableName, "\t");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("initSearchText();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("initTableView();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("initCountOfItemsLabel();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void initTableView() {");
    _builder.newLine();
    _builder.append("\t\t");
    String _firstLower_4 = StringExtensions.toFirstLower(object.getName());
    _builder.append(_firstLower_4, "\t\t");
    _builder.append(" = new ");
    _builder.append(tableName, "\t\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _firstLower_5 = StringExtensions.toFirstLower(object.getName());
    _builder.append(_firstLower_5, "\t\t");
    _builder.append(".setItems(");
    String _firstLower_6 = StringExtensions.toFirstLower(modelName);
    _builder.append(_firstLower_6, "\t\t");
    _builder.append("FilteredList);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("VBox.setVgrow(");
    String _firstLower_7 = StringExtensions.toFirstLower(object.getName());
    _builder.append(_firstLower_7, "\t\t");
    _builder.append(", Priority.ALWAYS);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("getChildren().add(");
    String _firstLower_8 = StringExtensions.toFirstLower(object.getName());
    _builder.append(_firstLower_8, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void initSearchText() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (showFilterText) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("searchText = new TextField();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("searchText.setPromptText(\"Search for ");
    String _firstLower_9 = StringExtensions.toFirstLower(modelName);
    _builder.append(_firstLower_9, "\t\t\t");
    _builder.append("(s)\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("searchText.setOnKeyReleased(event->onSearchTextKeyReleased());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getChildren().add(searchText);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void initCountOfItemsLabel() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (showCountOfItemsLabel) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("HBox hbox = new HBox();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("hbox.setSpacing(10);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Label countOfList = new Label();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("hbox.getChildren().add(new Label(\"Count of ");
    _builder.append(modelName, "\t\t\t");
    _builder.append("(s):\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("hbox.getChildren().add(countOfList);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getChildren().add(hbox);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("countOfList.textProperty().bind(Bindings.size(");
    String _firstLower_10 = StringExtensions.toFirstLower(modelName);
    _builder.append(_firstLower_10, "\t\t\t");
    _builder.append("List).asString());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void onSearchTextKeyReleased() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("contactFilteredList.setPredicate(item->{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (item==null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String searchString = searchText.getText().toLowerCase();");
    _builder.newLine();
    {
      EList<TableColumnFX> _columns = object.getColumns();
      for(final TableColumnFX column : _columns) {
        {
          boolean _isUseFilter = column.isUseFilter();
          if (_isUseFilter) {
            _builder.append("\t\t\t");
            _builder.append("String ");
            String _firstLower_11 = StringExtensions.toFirstLower(column.getName());
            _builder.append(_firstLower_11, "\t\t\t");
            _builder.append("Search = String.valueOf(item.get");
            String _firstUpper = StringExtensions.toFirstUpper(column.getName());
            _builder.append(_firstUpper, "\t\t\t");
            _builder.append("()).toLowerCase();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("if (");
            String _firstLower_12 = StringExtensions.toFirstLower(column.getName());
            _builder.append(_firstLower_12, "\t\t\t");
            _builder.append("Search.contains(searchString)) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("return true;");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setItems(ObservableList<");
    _builder.append(modelName, "\t");
    _builder.append("> list) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _firstLower_13 = StringExtensions.toFirstLower(modelName);
    _builder.append(_firstLower_13, "\t\t");
    _builder.append("List.clear();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _firstLower_14 = StringExtensions.toFirstLower(modelName);
    _builder.append(_firstLower_14, "\t\t");
    _builder.append("List.addAll(list);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
