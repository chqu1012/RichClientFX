/*
 * generated by Xtext 2.14.0
 */
package de.dc.emf.javafx.xtext.serializer;

import com.google.inject.Inject;
import de.dc.emf.javafx.model.javafx.AttributeFX;
import de.dc.emf.javafx.model.javafx.JavafxPackage;
import de.dc.emf.javafx.model.javafx.ModelFX;
import de.dc.emf.javafx.model.javafx.ProjectFX;
import de.dc.emf.javafx.model.javafx.TableColumnFX;
import de.dc.emf.javafx.model.javafx.TableViewFX;
import de.dc.emf.javafx.xtext.services.JavaFXLangGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class JavaFXLangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JavaFXLangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JavafxPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JavafxPackage.ATTRIBUTE_FX:
				sequence_AttributeFX(context, (AttributeFX) semanticObject); 
				return; 
			case JavafxPackage.MODEL_FX:
				sequence_ModelFX(context, (ModelFX) semanticObject); 
				return; 
			case JavafxPackage.PROJECT_FX:
				sequence_ProjectFX(context, (ProjectFX) semanticObject); 
				return; 
			case JavafxPackage.TABLE_COLUMN_FX:
				sequence_TableColumnFX(context, (TableColumnFX) semanticObject); 
				return; 
			case JavafxPackage.TABLE_VIEW_FX:
				sequence_TableViewFX(context, (TableViewFX) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AttributeFX returns AttributeFX
	 *
	 * Constraint:
	 *     (name=EString type=EString?)
	 */
	protected void sequence_AttributeFX(ISerializationContext context, AttributeFX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelFX returns ModelFX
	 *
	 * Constraint:
	 *     (name=EString (attributes+=AttributeFX attributes+=AttributeFX*)?)
	 */
	protected void sequence_ModelFX(ISerializationContext context, ModelFX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProjectFX returns ProjectFX
	 *
	 * Constraint:
	 *     (name=EString packagePath=EString? (controls+=ControlFX controls+=ControlFX*)? (models+=ModelFX models+=ModelFX*)?)
	 */
	protected void sequence_ProjectFX(ISerializationContext context, ProjectFX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableColumnFX returns TableColumnFX
	 *
	 * Constraint:
	 *     (name=EString width=EInt?)
	 */
	protected void sequence_TableColumnFX(ISerializationContext context, TableColumnFX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ControlFX returns TableViewFX
	 *     TableViewFX returns TableViewFX
	 *
	 * Constraint:
	 *     (name=EString usedModel=[ModelFX|EString]? (columns+=TableColumnFX columns+=TableColumnFX*)?)
	 */
	protected void sequence_TableViewFX(ISerializationContext context, TableViewFX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
