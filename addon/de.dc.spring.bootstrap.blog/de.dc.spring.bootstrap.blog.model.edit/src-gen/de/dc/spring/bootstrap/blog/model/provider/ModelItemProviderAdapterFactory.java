/**
 */
package de.dc.spring.bootstrap.blog.model.provider;

import de.dc.spring.bootstrap.blog.model.util.ModelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelItemProviderAdapterFactory extends ModelAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.spring.bootstrap.blog.model.Blog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlogItemProvider blogItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.spring.bootstrap.blog.model.Blog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlogAdapter() {
		if (blogItemProvider == null) {
			blogItemProvider = new BlogItemProvider(this);
		}

		return blogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.spring.bootstrap.blog.model.StorySection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StorySectionItemProvider storySectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.spring.bootstrap.blog.model.StorySection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStorySectionAdapter() {
		if (storySectionItemProvider == null) {
			storySectionItemProvider = new StorySectionItemProvider(this);
		}

		return storySectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.spring.bootstrap.blog.model.OverivewSection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OverivewSectionItemProvider overivewSectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.spring.bootstrap.blog.model.OverivewSection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOverivewSectionAdapter() {
		if (overivewSectionItemProvider == null) {
			overivewSectionItemProvider = new OverivewSectionItemProvider(this);
		}

		return overivewSectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.spring.bootstrap.blog.model.TitleBigSection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TitleBigSectionItemProvider titleBigSectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.spring.bootstrap.blog.model.TitleBigSection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTitleBigSectionAdapter() {
		if (titleBigSectionItemProvider == null) {
			titleBigSectionItemProvider = new TitleBigSectionItemProvider(this);
		}

		return titleBigSectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.spring.bootstrap.blog.model.TileSmallSection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TileSmallSectionItemProvider tileSmallSectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.spring.bootstrap.blog.model.TileSmallSection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTileSmallSectionAdapter() {
		if (tileSmallSectionItemProvider == null) {
			tileSmallSectionItemProvider = new TileSmallSectionItemProvider(this);
		}

		return tileSmallSectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.spring.bootstrap.blog.model.AboutSection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AboutSectionItemProvider aboutSectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.spring.bootstrap.blog.model.AboutSection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAboutSectionAdapter() {
		if (aboutSectionItemProvider == null) {
			aboutSectionItemProvider = new AboutSectionItemProvider(this);
		}

		return aboutSectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.spring.bootstrap.blog.model.WorkflowSection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowSectionItemProvider workflowSectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.spring.bootstrap.blog.model.WorkflowSection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowSectionAdapter() {
		if (workflowSectionItemProvider == null) {
			workflowSectionItemProvider = new WorkflowSectionItemProvider(this);
		}

		return workflowSectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.spring.bootstrap.blog.model.GallerySection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GallerySectionItemProvider gallerySectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.spring.bootstrap.blog.model.GallerySection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGallerySectionAdapter() {
		if (gallerySectionItemProvider == null) {
			gallerySectionItemProvider = new GallerySectionItemProvider(this);
		}

		return gallerySectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.spring.bootstrap.blog.model.GalleryMaterialSection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GalleryMaterialSectionItemProvider galleryMaterialSectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.spring.bootstrap.blog.model.GalleryMaterialSection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGalleryMaterialSectionAdapter() {
		if (galleryMaterialSectionItemProvider == null) {
			galleryMaterialSectionItemProvider = new GalleryMaterialSectionItemProvider(this);
		}

		return galleryMaterialSectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.spring.bootstrap.blog.model.Tile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TileItemProvider tileItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.spring.bootstrap.blog.model.Tile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTileAdapter() {
		if (tileItemProvider == null) {
			tileItemProvider = new TileItemProvider(this);
		}

		return tileItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (blogItemProvider != null)
			blogItemProvider.dispose();
		if (tileSmallSectionItemProvider != null)
			tileSmallSectionItemProvider.dispose();
		if (storySectionItemProvider != null)
			storySectionItemProvider.dispose();
		if (overivewSectionItemProvider != null)
			overivewSectionItemProvider.dispose();
		if (titleBigSectionItemProvider != null)
			titleBigSectionItemProvider.dispose();
		if (aboutSectionItemProvider != null)
			aboutSectionItemProvider.dispose();
		if (workflowSectionItemProvider != null)
			workflowSectionItemProvider.dispose();
		if (gallerySectionItemProvider != null)
			gallerySectionItemProvider.dispose();
		if (galleryMaterialSectionItemProvider != null)
			galleryMaterialSectionItemProvider.dispose();
		if (tileItemProvider != null)
			tileItemProvider.dispose();
	}

}
