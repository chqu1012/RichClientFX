/*
 * generated by Xtext 2.14.0
 */
package de.dc.emf.javafx.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.dc.emf.javafx.xtext.ide.contentassist.antlr.internal.InternalJavaFXLangParser;
import de.dc.emf.javafx.xtext.services.JavaFXLangGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class JavaFXLangParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(JavaFXLangGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, JavaFXLangGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getProjectFXAccess().getGroup(), "rule__ProjectFX__Group__0");
			builder.put(grammarAccess.getProjectFXAccess().getGroup_4(), "rule__ProjectFX__Group_4__0");
			builder.put(grammarAccess.getProjectFXAccess().getGroup_5(), "rule__ProjectFX__Group_5__0");
			builder.put(grammarAccess.getProjectFXAccess().getGroup_5_3(), "rule__ProjectFX__Group_5_3__0");
			builder.put(grammarAccess.getProjectFXAccess().getGroup_6(), "rule__ProjectFX__Group_6__0");
			builder.put(grammarAccess.getProjectFXAccess().getGroup_6_3(), "rule__ProjectFX__Group_6_3__0");
			builder.put(grammarAccess.getModelFXAccess().getGroup(), "rule__ModelFX__Group__0");
			builder.put(grammarAccess.getModelFXAccess().getGroup_4(), "rule__ModelFX__Group_4__0");
			builder.put(grammarAccess.getModelFXAccess().getGroup_4_3(), "rule__ModelFX__Group_4_3__0");
			builder.put(grammarAccess.getTableViewFXAccess().getGroup(), "rule__TableViewFX__Group__0");
			builder.put(grammarAccess.getTableViewFXAccess().getGroup_4(), "rule__TableViewFX__Group_4__0");
			builder.put(grammarAccess.getTableViewFXAccess().getGroup_5(), "rule__TableViewFX__Group_5__0");
			builder.put(grammarAccess.getTableViewFXAccess().getGroup_5_3(), "rule__TableViewFX__Group_5_3__0");
			builder.put(grammarAccess.getTableColumnFXAccess().getGroup(), "rule__TableColumnFX__Group__0");
			builder.put(grammarAccess.getTableColumnFXAccess().getGroup_4(), "rule__TableColumnFX__Group_4__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getAttributeFXAccess().getGroup(), "rule__AttributeFX__Group__0");
			builder.put(grammarAccess.getAttributeFXAccess().getGroup_4(), "rule__AttributeFX__Group_4__0");
			builder.put(grammarAccess.getProjectFXAccess().getNameAssignment_2(), "rule__ProjectFX__NameAssignment_2");
			builder.put(grammarAccess.getProjectFXAccess().getPackagePathAssignment_4_1(), "rule__ProjectFX__PackagePathAssignment_4_1");
			builder.put(grammarAccess.getProjectFXAccess().getControlsAssignment_5_2(), "rule__ProjectFX__ControlsAssignment_5_2");
			builder.put(grammarAccess.getProjectFXAccess().getControlsAssignment_5_3_1(), "rule__ProjectFX__ControlsAssignment_5_3_1");
			builder.put(grammarAccess.getProjectFXAccess().getModelsAssignment_6_2(), "rule__ProjectFX__ModelsAssignment_6_2");
			builder.put(grammarAccess.getProjectFXAccess().getModelsAssignment_6_3_1(), "rule__ProjectFX__ModelsAssignment_6_3_1");
			builder.put(grammarAccess.getModelFXAccess().getNameAssignment_2(), "rule__ModelFX__NameAssignment_2");
			builder.put(grammarAccess.getModelFXAccess().getAttributesAssignment_4_2(), "rule__ModelFX__AttributesAssignment_4_2");
			builder.put(grammarAccess.getModelFXAccess().getAttributesAssignment_4_3_1(), "rule__ModelFX__AttributesAssignment_4_3_1");
			builder.put(grammarAccess.getTableViewFXAccess().getNameAssignment_2(), "rule__TableViewFX__NameAssignment_2");
			builder.put(grammarAccess.getTableViewFXAccess().getUsedModelAssignment_4_1(), "rule__TableViewFX__UsedModelAssignment_4_1");
			builder.put(grammarAccess.getTableViewFXAccess().getColumnsAssignment_5_2(), "rule__TableViewFX__ColumnsAssignment_5_2");
			builder.put(grammarAccess.getTableViewFXAccess().getColumnsAssignment_5_3_1(), "rule__TableViewFX__ColumnsAssignment_5_3_1");
			builder.put(grammarAccess.getTableColumnFXAccess().getNameAssignment_2(), "rule__TableColumnFX__NameAssignment_2");
			builder.put(grammarAccess.getTableColumnFXAccess().getWidthAssignment_4_1(), "rule__TableColumnFX__WidthAssignment_4_1");
			builder.put(grammarAccess.getAttributeFXAccess().getNameAssignment_2(), "rule__AttributeFX__NameAssignment_2");
			builder.put(grammarAccess.getAttributeFXAccess().getTypeAssignment_4_1(), "rule__AttributeFX__TypeAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private JavaFXLangGrammarAccess grammarAccess;

	@Override
	protected InternalJavaFXLangParser createParser() {
		InternalJavaFXLangParser result = new InternalJavaFXLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public JavaFXLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(JavaFXLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
